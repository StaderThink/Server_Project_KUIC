@inject AuthenticationStateProvider autentificacion
@inject NavigationManager navegador
@inject ILocalStorageService localStorage
@inject IToastService toaster

@page "/iniciar_sesion"

@using Aplicacion.Sesiones.Formularios

<div class="login">
    <div class="login-box">
        <div class="content">
            <h3 class="title is-3 has-text-centered">Inicio de sesión</h3>

            @if (TiempoRestante.Minutes == 0 && Intentos != 3)
            {
                <EditForm Model="Modelo" OnValidSubmit="Enviar">
                    <DataAnnotationsValidator />

                    <FormField Label="Documento">
                        <NumberField @bind-Value="Modelo.Documento" placeholder="CC o NIT" />
                        <FormFeedback For="() => Modelo.Documento" Help="Número de documento de identidad" />
                    </FormField>

                    <FormField Label="Contraseña">
                        <PasswordField @bind-Value="Modelo.Clave" placeholder="Ej. MiContraseña" />
                        <FormFeedback For="() => Modelo.Clave" />
                    </FormField>

                    <div class="content">
                        <p>¿Olvidaste tu contraseña? Puedes <a href="/reestablecer">reestablecerla ahora</a>.</p>
                    </div>

                    <FormButtons IsLoading="Cargando">
                        <SubmitButton IsFullWidth>Ingresar</SubmitButton>
                    </FormButtons>
                </EditForm>
            }

            else
            {
                <h4 class="title is-4">Lamentamos ponerte a esperar.</h4>
                <p>Tu sesión ha sido cancelada por seguridad, por favor espera @(TiempoRestante.Minutes) minuto(s) para volver a ingresar tus credenciales.</p>
            }
        </div>
    </div>
</div>

@code {
    private FormularioIniciarSesion Modelo = new FormularioIniciarSesion();

    private bool Cargando = false;
    private int Intentos = 0;
    private TimeSpan TiempoRestante;

    protected override async Task OnInitializedAsync()
    {
        await ValidarIntentos();
    }

    private async Task ValidarIntentos()
    {
        Cargando = true;

        bool hayTiempoEspera = await localStorage.ContainKeyAsync("login_wait");

        if (hayTiempoEspera)
        {
            try
            {
                var tiempoEspera = await localStorage.GetItemAsync<DateTime>("login_wait");
                var tiempoRestante = tiempoEspera - DateTime.Now;

                if (tiempoRestante.Minutes <= 0)
                {
                    await localStorage.ClearAsync();
                }

                else
                {
                    TiempoRestante = tiempoRestante;
                    Intentos = await localStorage.GetItemAsync<int>("login_tries");
                }
            }

            catch
            {
                toaster.ShowWarning("Hubo un fallo recuperando tu sesión, por favor recarga la página");

                await localStorage.SetItemAsync("login_tries", 4);
                await localStorage.SetItemAsync("login_wait", DateTime.Now.AddMinutes(2));
            }
        }

        Cargando = false;
    }

    private async Task Enviar()
    {
        Cargando = true;

        try
        {
            var nuevoProveedor = (ProveedorAutenticacion) autentificacion;
            await nuevoProveedor.SignIn(Modelo.Documento, Modelo.Clave);

            navegador.NavigateTo("/");
        }

        catch
        {
            Intentos++;

            if (Intentos > 3)
            {
                toaster.ShowError("Has superado el número de intentos permitidos, espera 5 minutos para volver a intentar.");

                await localStorage.SetItemAsync("login_wait", DateTime.Now.AddMinutes(5));
                await ValidarIntentos();
            }

            else
            {

                await localStorage.SetItemAsync("login_tries", Intentos);
                toaster.ShowWarning("Por favor revisa tus credenciales.");
            }
        }

        finally
        {
            Cargando = false;
        }
    }
}
