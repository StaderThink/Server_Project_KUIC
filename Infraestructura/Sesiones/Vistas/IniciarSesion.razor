@inject AuthenticationStateProvider proveedor
@inject ILocalStorageService localStorage

<h1 class="title is-1">Iniciar sesión</h1>

@if (!string.IsNullOrEmpty(mensaje))
{
    <blockquote class="is-error">@mensaje</blockquote>
}

<EditForm Model="Modelo" OnValidSubmit="Iniciar">
    <DataAnnotationsValidator />

    <FormField Label="Documento">
        <NumberField @bind-Value="Modelo.Documento" />
        <FormFeedback For="() => Modelo.Documento" Help="Número de documento de identidad (CC o NIT)" />
    </FormField>

    <FormField Label="Contraseña">
        <PasswordField @bind-Value="Modelo.Clave" />
        <FormFeedback For="() => Modelo.Clave" />
    </FormField>

    <FormField>
        <p>¿Olvidaste tu contraseña? Puedes <a href="/reestablecer">reestablecerla ahora</a>.</p>
    </FormField>

    <div class="buttons">
        <SubmitButton>Ingresar</SubmitButton>
    </div>
</EditForm>

@code {
    private class Formulario
    {
        [StringLength(10, MinimumLength = 4, ErrorMessage = "El documento debe tener entre {2} y {1} carateres")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Este campo es obligatorio")]
        public string Documento { get; set; }

        [StringLength(int.MaxValue, MinimumLength = 6, ErrorMessage = "La contraseña debe tener minimo {2} caracteres")]
        [Required(AllowEmptyStrings = false, ErrorMessage = "Este campo es obligatorio")]
        public string Clave { get; set; }
    }

    private Formulario Modelo { get; set; } = new Formulario();

    string mensaje;

    bool cargando = true;

    int intentos = 0;

    protected override async Task OnInitializedAsync()
    {
        bool hayTiempoEspera = await localStorage.ContainKeyAsync("tiempo_espera_login");

        if (hayTiempoEspera)
        {
            DateTime tiempoEspera = DateTime.Now;

            try
            {
                tiempoEspera = await localStorage.GetItemAsync<DateTime>("tiempo_espera_login");
            }

            catch
            {
                mensaje = "Hubo un fallo recuperando tu sesión, por favor recarga la página";
                await localStorage.SetItemAsync("tiempo_espera_login", DateTime.Now.AddMinutes(5));
            }

            if (DateTime.Now > tiempoEspera)
            {
                intentos = 0;
                await localStorage.RemoveItemAsync("tiempo_espera_login");
            }

            else
            {
                var tiempoRestante = tiempoEspera - DateTime.Now;
                string textoMinutos = tiempoRestante.Minutes == 1 ? "minuto" : "minutos";

                intentos = 3;
                mensaje = $"Faltan {tiempoRestante.Minutes} {textoMinutos}, por favor espera para volver a intentar iniciar sesión";
            }
        }

        cargando = false;
    }

    async Task Iniciar()
    {
        mensaje = string.Empty;

        try
        {
            cargando = true;

            var nuevoProveedor = (ProveedorAutenticacion) proveedor;
            await nuevoProveedor.IniciarSesion(Modelo.Documento, Modelo.Clave);
        }

        catch
        {
            if (intentos == 2)
            {
                mensaje = "Has superado el número de intentos permitidos, espera 5 minutos para volver a intentar.";
                await localStorage.SetItemAsync("tiempo_espera_login", DateTime.Now.AddMinutes(5));
            }

            else
            {
                mensaje = "Por favor revisa tus credenciales. También puedes contactar al administrador del sistema";
            }

            intentos++;
        }

        finally
        {
            cargando = false;
        }
    }
}
