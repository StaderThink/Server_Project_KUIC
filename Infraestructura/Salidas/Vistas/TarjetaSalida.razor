@inject HttpClient http
@inject NavigationManager navegador

    <div class="card">
        <div class="card-content">
            <div class="content">
                @if (detalles is null)
                {
                    <p>Espere...</p>
                }
                else
                {
                    <p>@detalles.Count() Productos(s). <button class="button is-small is-primary is-outlined" @onclick="AbrirModal">Ver detalle</button></p>
                }

                @if (mostrarModal)
                {
                    <div class="modal is-active">
                        <div class="modal-background"></div>
                        <div class="modal-card message is-primary">
                            <header class="modal-card-head message-header">
                                <span class="modal-card-title">Detalle de salida #@salida.Id</span>
                                <button class="delete" @onclick="CerrarModal" aria-label="close"></button>
                            </header>
                            <section class="modal-card-body">
                                @foreach (var detalle in detalles)
                                {
                                    <ProductDetail detalle="@detalle" />
                                }
                            </section>
                        </div>
                    </div>
                }

                <p>@salida.Fecha.ToShortDateString()</p>

                @if (salida.Pedido == 0)
                {
                    <p>@salida.Observacion.ToCapitalize()</p>
                }
                else
                {
                    <p>Salida con pedido <button class="button is-small is-primary is-outlined" @onclick="AbrirPedido">Ver pedido</button></p>
                    @if (mostrarPedido)
                    {
                        <div class="modal is-active">
                            <div class="modal-background"></div>
                            <div class="modal-card message is-primary">
                                <header class="modal-card-head message-header">
                                    <span class="modal-card-title">Pedido #@salida.Pedido </span>
                                    <button class="delete" @onclick="CerrarPedido" aria-label="close"></button>
                                </header>
                                <section class="modal-card-body">
                                    <p>Empresa: @cliente.Nombre</p>
                                    <p>Encargado: @cliente.Encargado</p>
                                    <p>Dirección: @cliente.Direccion</p>
                                    <p>Fecha de entrega: @pedido.Fecha</p>
                                </section>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
   
@code {
    #region Detalle
    bool mostrarModal = false;

    void AbrirModal() => mostrarModal = true;
    void CerrarModal() => mostrarModal = false;
    #endregion

    #region Pedido
    bool mostrarPedido = false;

    void AbrirPedido() => mostrarPedido = true;
    void CerrarPedido() => mostrarPedido = false;
    #endregion

    [Parameter]
    public Salida salida { get; set; }

    [Parameter]
    public EventCallback<Salida> OnSalidaEliminada { get; set; }

    DetalleSalida[] detalles { get; set; } = new DetalleSalida[0];

    private Pedido pedido;
    private Cliente cliente;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            detalles = await http.GetFromJsonAsync<DetalleSalida[]>($"/api/detalleSalida/salida/{salida.Id}");


            if (salida.Pedido != 0)
            {
                pedido = await http.GetFromJsonAsync<Pedido>($"/api/pedido/{salida.Pedido}");
                cliente = await http.GetFromJsonAsync<Cliente>($"/api/cliente/{pedido.Cliente}");
            }
        }

        catch
        {
#if DEBUG
            throw;
#endif
        }
    }
}
