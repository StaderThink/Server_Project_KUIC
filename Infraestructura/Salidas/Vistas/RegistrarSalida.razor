@layout AppLayout
@inject NavigationManager navegador
@inject HttpClient http

@using Aplicacion.Salidas.Formularios
@page "/salida/registrar"

    <AuthorizeView Roles="logistica">
        <Authorized>
            <h3 class="title is-3">Registrar Salida</h3>

            @if (mensaje is string)
            {
                <blockquote class="is-warn">
                    <p>@mensaje</p>
                </blockquote>
            }

            <div class="form">
                <div class="control">
                    <button class="button is-primary" @onclick="AgregarElemento">+ Producto</button>
                </div>

                <div class="field">
                    <div class="columns is-multiline">
                        @foreach (var detalle in detalles)
                        {
                            <ItemDetail listadoProductos="listaProductos" detalle="detalle" OnDeleted="EliminarElemento" />
                        }
                    </div>
                </div>

                <div class="field">
                    <label class="label" for="observacion">Observación</label>
                    <textarea id="observacion" class="textarea" type="text" @bind="salida.Observacion"></textarea>
                    <small>Opcional</small>
                </div>

                <div class="control is-grouped">
                    <button class="is-primary" @onclick="Enviar">Registrar</button>
                    <a href="/entrada" class="button is-outlined">Cancelar</a>
                </div>

            </div>
        </Authorized>
        <NotAuthorized>
            <p>No tienes permisos para esta vista</p>
        </NotAuthorized>
    </AuthorizeView>

@code {
    string mensaje;

    Salida salida { get; set; } = new Salida();

    List<DetalleSalida> detalles = new List<DetalleSalida>();
    Producto[] listaProductos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            listaProductos = await http.GetFromJsonAsync<Producto[]>("/api/producto");
        }

        catch
        {
            listaProductos = new Producto[0];
        }
    }

    private void AgregarElemento()
    {
        detalles.Add(new DetalleSalida());
    }

    private void EliminarElemento(IDetalle detalle)
    {
        detalles.Remove((DetalleSalida) detalle);
    }

    async Task Enviar()
    {
        try
        {
            var formulario = new FormularioRegistrarSalida()
            {
                Salida = salida,
                Detalles = detalles
            };

            var respuesta = await http.PostAsJsonAsync("/api/salida", formulario);

            if (respuesta.IsSuccessStatusCode)
            {
                navegador.NavigateTo("/salida");
            }
        }
        catch
        {
            mensaje = "Hubo un error al insertar";
        }
    }
}
