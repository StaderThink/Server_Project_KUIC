@layout AppLayout
@inject NavigationManager navegador
@inject HttpClient http
@inject IToastService toaster

@using Aplicacion.Salidas.Formularios
@page "/salida/registrar"
@attribute [Authorize(Roles = "logistica")] 

    <h3 class="title is-3">Registrar Salida</h3>

    @if (mensaje is string)
    {
        <blockquote class="is-warn">
            <p>@mensaje</p>
        </blockquote>
    }

    <EditForm Model="salida" OnValidSubmit="Enviar">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <FormField>
            <div class="control">
                <button class="button is-primary" type="button" @onclick="AgregarElemento">+ Producto</button>
            </div>
        </FormField>

        <FormField>
            @foreach (var detalle in detalles)
            {
                <CartItem Detail="@detalle" Products="listaProductos" OnDelete="EliminarElemento" UseStockOnly />
            }
        </FormField>

        <FormField Label="Observación">
            <TextField id="observacion" @bind-Value="salida.Observacion"></TextField>
            <FormFeedback For="() => salida.Observacion"></FormFeedback>
        </FormField>

        <FormField IsLoading="cargando">
            <CancelButton To="/salida">Cancelar</CancelButton>
            <SubmitButton>Registrar</SubmitButton>
        </FormField>

    </EditForm>

@code {
    bool cargando = false;

    string mensaje;

    Salida salida { get; set; } = new Salida();

    List<DetalleSalida> detalles = new List<DetalleSalida>();
    Producto[] listaProductos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            listaProductos = await http.GetFromJsonAsync<Producto[]>("/api/producto");
        }

        catch
        {
            listaProductos = new Producto[0];
        }
    }

    private void AgregarElemento()
    {
        detalles.Add(new DetalleSalida());
    }

    private void EliminarElemento(IDetalle detalle)
    {
        detalles.Remove((DetalleSalida) detalle);
    }

    async Task Enviar()
    {
        try
        {
            foreach (var detalle in detalles)
            {
                if (detalle.Producto == 0 || detalle.Cantidad == 0)
                {
                    toaster.ShowWarning("Falta algún valor del detalle");
                }

                else
                {
                    cargando = true;
                    var formulario = new FormularioRegistrarSalida()
                    {
                        Salida = salida,
                        Detalles = detalles
                    };

                    var respuesta = await http.PostAsJsonAsync("/api/salida", formulario);

                    if (respuesta.IsSuccessStatusCode)
                    {
                        navegador.NavigateTo("/salida");
                    }
                    cargando = false;
                }
            }
        }
        catch
        {
            mensaje = "Hubo un error al insertar";
        }
    }
}
