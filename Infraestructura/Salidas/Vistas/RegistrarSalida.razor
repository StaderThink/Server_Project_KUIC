@layout AppLayout
@inject NavigationManager navegador
@inject HttpClient http
@inject IToastService toaster

@using Aplicacion.Salidas.Formularios
@page "/salida/registrar"
@attribute [Authorize(Roles = "logistica")] 

<div class="level">
    <div class="level-left">
        <h3 class="title is-3">Registrar Salida</h3>
    </div>
    <div class="level-right">
        <nav class="breadcrumb is-small">
            <ul>
                <li><a href="/salida">Egresos</a></li>
                <li class="is-active"><a href="#">Registrar</a></li>
            </ul>
        </nav>
    </div>
</div>

<hr />

<EditForm Model="salida" OnValidSubmit="Enviar">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="level">
        <div class="level-left"><span></span></div>
        <div class="level-right">
            <FormField>
                <div class="control">
                    <button class="button is-primary" type="button" @onclick="AgregarElemento">+ Producto</button>
                </div>
            </FormField>
        </div>
    </div>

    <FormField>
        @foreach (var detalle in detalles)
        {
            <CartItem Detail="@detalle" Products="listaProductos" OnDelete="EliminarElemento" UseStockOnly />
        }
    </FormField>

    <FormField Label="Observación">
        <TextField id="observacion" @bind-Value="salida.Observacion"></TextField>
        <FormFeedback For="() => salida.Observacion"></FormFeedback>
    </FormField>

    <div class="level">
        <div class="level-left"><span></span></div>
        <div class="level-right">
            <FormField IsLoading="cargando">
                <CancelButton To="/salida">Cancelar</CancelButton>
                <SubmitButton>Registrar</SubmitButton>
            </FormField>
        </div>
    </div>

</EditForm>

@code {
    private bool cargando = false;

    private Salida salida { get; set; } = new Salida();

    private List<DetalleSalida> detalles = new List<DetalleSalida>();
    private Producto[] listaProductos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            listaProductos = await http.GetFromJsonAsync<Producto[]>("/api/producto");
        }

        catch
        {
            listaProductos = new Producto[0];
        }
    }

    private void AgregarElemento()
    {
        detalles.Add(new DetalleSalida());
    }

    private void EliminarElemento(IDetalle detalle)
    {
        detalles.Remove((DetalleSalida) detalle);
    }

    private async Task Enviar()
    {
        try
        {
            if (detalles.Any() && detalles.All(d => d.Producto != 0 && d.Cantidad != 0))
            {
                cargando = true;
                var formulario = new FormularioRegistrarSalida()
                {
                    Salida = salida,
                    Detalles = detalles
                };

                var respuesta = await http.PostAsJsonAsync("/api/salida", formulario);

                if (respuesta.IsSuccessStatusCode)
                {
                    navegador.NavigateTo("/salida");
                }
            }

            else
            {
                toaster.ShowWarning("Falta algún valor del detalle");
            }
        }
        catch
        {
#if DEBUG
            throw;
#endif
        }

        finally
        {
            cargando = false;
        }
    }
}
