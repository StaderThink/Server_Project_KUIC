@layout AppLayout
@inject NavigationManager navegador
@inject HttpClient http

@using Aplicacion.Salidas.Formularios
@page "/salida/registrar"

<AuthorizeView Roles="logistica">
    <Authorized>
        <h3 class="title is-3">Registrar Salida</h3>

        @if (mensaje is string)
        {
            <blockquote class="is-warn">
                <p>@mensaje</p>
            </blockquote>
        }

        <EditForm Model="salida" OnValidSubmit="Enviar">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <FormField>
                <div class="control">
                    <button class="button is-primary" @onclick="AgregarElemento">+ Producto</button>
                </div>
            </FormField>

            <FormField>
                @foreach (var detalle in detalles)
                {
                    <CartItem Detail="@detalle" Products="listaProductos" OnDelete="EliminarElemento" UseStockOnly />
                }
            </FormField>

            <FormField Label="Observación">
                <TextField id="observacion" @bind-Value="salida.Observacion"></TextField>
                <FormFeedback For="() => salida.Observacion" Help="Opcional"></FormFeedback>
            </FormField>

            <FormField IsLoading="cargando">
                <SubmitButton>Registrar</SubmitButton>
                <CancelButton GoTo="/salida">Cancelar</CancelButton>
            </FormField>

        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p>No tienes permisos para esta vista</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    bool cargando = false;

    string mensaje;

    Salida salida { get; set; } = new Salida();

    List<DetalleSalida> detalles = new List<DetalleSalida>();
    Producto[] listaProductos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            listaProductos = await http.GetFromJsonAsync<Producto[]>("/api/producto");
        }

        catch
        {
            listaProductos = new Producto[0];
        }
    }

    private void AgregarElemento()
    {
        detalles.Add(new DetalleSalida());
    }

    private void EliminarElemento(IDetalle detalle)
    {
        detalles.Remove((DetalleSalida) detalle);
    }

    async Task Enviar()
    {
        try
        {
            cargando = true;
            var formulario = new FormularioRegistrarSalida()
            {
                Salida = salida,
                Detalles = detalles
            };

            var respuesta = await http.PostAsJsonAsync("/api/salida", formulario);

            if (respuesta.IsSuccessStatusCode)
            {
                navegador.NavigateTo("/salida");
            }
            cargando = false;
        }
        catch
        {
            mensaje = "Hubo un error al insertar";
        }
    }
}
