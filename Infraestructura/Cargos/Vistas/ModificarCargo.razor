@inject HttpClient http
@inject NavigationManager navegador
@inject IToastService toaster

@attribute [Authorize(Roles = "usuarios")]

@page "/cargo/modificar/{Id:int}"
@layout AppLayout

<nav class="breadcrumb">
    <ul>
        <li><a href="/cargo">Cargo</a></li>
        <li class="is-active"><a href="#">Modificar</a></li>
    </ul>
</nav>

<h3 class="title is-3">Modificar cargo</h3>
<hr />

<EditForm Model="Cargo" OnValidSubmit="Enviar">
    <DataAnnotationsValidator />

    <FormField Label="Nombre">
        <TextField @bind-Value="Cargo.Nombre" />
        <FormFeedback For="() => Cargo.Nombre" Help="Nombre que identifica el cargo (debe ser único)" />
    </FormField>

    <FormField>
        <CheckboxField @bind-Value="Cargo.Pedidos">
            <span>Tendrá permiso para supervisar los pedidos.</span>
        </CheckboxField>
    </FormField>

    <FormField>
        <CheckboxField @bind-Value="Cargo.Usuarios">
            <span>Puede crear usuarios y asignar cargos</span>
        </CheckboxField>
        <FormFeedback For="() => Cargo.Usuarios" Help="También creará notificaciones para el personal" />
    </FormField>

    <FormField>
        <CheckboxField @bind-Value="Cargo.Logistica">
            <span>Tendrá acceso al inventario, con lo que podrá realizar entradas y salidas del mismo.</span>
        </CheckboxField>
    </FormField>

    <FormField>
        <CheckboxField @bind-Value="Cargo.Clientes">
            <span>Manejará la información de los clientes en el sistema.</span>
        </CheckboxField>
    </FormField>

    <FormField>
        <CheckboxField @bind-Value="Cargo.Solicitar">
            <span>Podrá solicitar pedidos a nombre de los clientes (usar para asesores comerciales).</span>
        </CheckboxField>
    </FormField>

    <FormButtons IsLoading="Cargando">
        <CancelButton To="/cargo">Cancelar</CancelButton>
        <SubmitButton>Modificar</SubmitButton>
    </FormButtons>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Cargo Cargo = new Cargo();
    private bool Cargando = false;

    protected override async Task OnInitializedAsync()
    {
        Cargo = await http.GetFromJsonAsync<Cargo>($"/api/cargo/{Id}");
    }

    private async Task Enviar()
    {
        Cargando = true;

        try
        {
            HttpResponseMessage respuesta = await http.PutAsJsonAsync($"/api/cargo/{Id}", Cargo);

            if (respuesta.IsSuccessStatusCode)
            {
                navegador.NavigateTo("/cargo");
            }

            else
            {
                toaster.ShowWarning("No se logro editar el registro");
            }
        }
        catch
        {
            toaster.ShowError("Hubo un error desconocido, intenta nuevamente más tarde");
#if DEBUG
            throw;
#endif
        }

        finally
        {
            Cargando = false;
        }
    }
}