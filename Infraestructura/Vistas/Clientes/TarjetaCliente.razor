@inject HttpClient http

<div class="card">
    <p><b>@(cliente.Nombre.ToCapitalize())</b></p>
    <p>RUT:  @cliente.Rut</p>

    <span class="button is-static is-small">@(cliente.Activo ? "Activo" : "Inactivo")</span>

    <div class="control is-grouped">
        <a href="/cliente/modificar/@cliente.Id" class="button is-prime">Editar</a>

        @if (cargando)
        {
            <button class="is-outline has-loader" disabled>Borrar</button>
        }

        else
        {
            <button class="is-outline" @onclick="Eliminar">Borrar</button>
        }
    </div>
</div>

@code {
    [Parameter]
    public Cliente cliente { get; set; }

    [Parameter]
    public EventCallback onDeleted { get; set; }

    bool cargando = false;

    async Task Eliminar()
    {
        cargando = true;

        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/cliente/{cliente.Id}");

        if (respuesta.IsSuccessStatusCode && onDeleted.HasDelegate)
        {
            await onDeleted.InvokeAsync(null);
        }

        cargando = false;
    }
}