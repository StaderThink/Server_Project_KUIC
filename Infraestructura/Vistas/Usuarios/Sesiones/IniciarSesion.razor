@inject AuthenticationStateProvider proveedor
@inject ILocalStorageService localStorage

@using Autenticacion

<h1>Iniciar sesión</h1>

@if (!string.IsNullOrEmpty(mensaje))
{
    <blockquote class="is-error">@mensaje</blockquote>
}

<div class="form">
    <div class="field">
        <label>Documento</label>

        <div class="control is-attached">
            <input type="text" pattern="^[0-9]{6,10}$" minlength="7" @bind="documento" placeholder="###" class="input" />
        </div>

        <small>Número de documento de identidad (CC o NIT)</small>
    </div>

    <div class="field">
        <label>Clave</label>
        <input type="password" @bind="clave" minlength="4" placeholder="###" class="input" />
    </div>

    <div class="field">
        <div class="control is-grouped">
            @if (cargando)
            {
                <button class="is-primary has-loader" disabled>Ingresar</button>
            }

            else
            {
                <button class="is-primary" @onclick="Iniciar" disabled="@(intentos == 3)">Ingresar</button>
            }
        </div>
    </div>
</div>

@code {
    string documento;
    string clave;

    string mensaje;

    bool cargando = true;

    int intentos = 0;

    protected override async Task OnInitializedAsync()
    {
        bool hayTiempoEspera = await localStorage.ContainKeyAsync("tiempo_espera_login");

        if (hayTiempoEspera)
        {
            DateTime tiempoEspera = DateTime.Now;

            try
            {
                tiempoEspera = await localStorage.GetItemAsync<DateTime>("tiempo_espera_login");
            }

            catch
            {
                mensaje = "Hubo un fallo recuperando tu sesión, por favor recarga la página";
                await localStorage.SetItemAsync("tiempo_espera_login", DateTime.Now.AddMinutes(5));
            }

            if (DateTime.Now > tiempoEspera)
            {
                intentos = 0;
                await localStorage.RemoveItemAsync("tiempo_espera_login");
            }

            else
            {
                var tiempoRestante = tiempoEspera - DateTime.Now;
                string textoMinutos = tiempoRestante.Minutes == 1 ? "minuto" : "minutos";

                intentos = 3;
                mensaje = $"Faltan {tiempoRestante.Minutes} {textoMinutos}, por favor espera para volver a intentar iniciar sesión";
            }
        }

        cargando = false;
    }

    async Task Iniciar()
    {
        mensaje = string.Empty;

        try
        {
            cargando = true;

            var nuevoProveedor = (BlazorAuthenticationProvider) proveedor;
            await nuevoProveedor.IniciarSesion(documento, clave);
        }

        catch
        {
            if (intentos == 2)
            {
                mensaje = "Has superado el número de intentos permitidos, espera 5 minutos para volver a intentar.";
                await localStorage.SetItemAsync("tiempo_espera_login", DateTime.Now.AddMinutes(5));
            }

            else
            {
                mensaje = "Por favor revisa tus credenciales. También puedes contactar al administrador del sistema";
            }

            intentos++;
        }

        finally
        {
            cargando = false;
        }
    }
}
