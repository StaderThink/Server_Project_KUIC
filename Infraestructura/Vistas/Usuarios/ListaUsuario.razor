@inject HttpClient http
@inject NavigationManager navegador

@page "/usuario"
@page "/usuario/{busqueda}"
@layout AppLayout

@if (cargando) {
    <div class="loader is-medium"></div>
}

else if (!autorizado) {
    <p>Oops... no estas autorizado.</p>
}

else {
    @if (lista is null) {
        <p>Hubo un error cargando la lista</p>
    }

    else {
        <h3>Listar usuarios</h3>

        <a class="button is-prime" href="/usuario/registrar">Registrar usuario</a>

        <div class="grid has-gap xs-1 md-2">
            @foreach (var usuario in lista) {
                <TarjetaUsuario usuario="usuario" onDeleted="ObtenerListado" />
            }
        </div>
    }
}

@code {
    Usuario[] lista { get; set; }

    bool cargando = true;
    bool autorizado = false;

    [Parameter]
    public string busqueda { get; set; } = "";

    protected override async Task OnInitializedAsync() {
        await ObtenerListado();
    }

    private async Task ObtenerListado() {
        cargando = true;
        HttpResponseMessage respuesta = await http.GetAsync($"/api/usuario?buscar={busqueda}");

        try {
            if (respuesta.StatusCode == HttpStatusCode.OK) {
                lista = await respuesta.Content.ReadFromJsonAsync<Usuario[]>();
                autorizado = true;
            }

            else {
                lista = null;
            }
        }

        catch (Exception ex) {
            lista = null;
            Console.WriteLine(ex);
        }

        finally {
            cargando = false;
        }
    }
}