@inject HttpClient http
@inject NavigationManager navegador

@page "/usuario"
@page "/usuario/{busqueda}"
@layout AppLayout

<AuthorizeView Roles="usuarios">
    <Authorized>
        @if (cargando)
        {
            <div class="loader is-medium"></div>
        }

        else
        {
            @if (lista is null)
            {
                <p>Hubo un error cargando la lista</p>
            }

            else
            {
                <h3>Listar usuarios</h3>

                <a class="button is-prime" href="/usuario/registrar">Registrar usuario</a>

                <div class="grid has-gap xs-1 md-2">
                    @foreach (var usuario in lista)
                    {
                        <TarjetaUsuario usuario="usuario" onDeleted="ObtenerListado" />
                    }
                </div>
            }
        }
    </Authorized>

    <NotAuthorized>
        <p>Oops... parece que no tienes permisos para estar aquí</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    Usuario[] lista { get; set; }

    bool cargando = true;

    [Parameter]
    public string busqueda { get; set; } = "";

    protected override async Task OnInitializedAsync() {
        await ObtenerListado();
    }

    private async Task ObtenerListado() {
        cargando = true;
        HttpResponseMessage respuesta = await http.GetAsync($"/api/usuario?buscar={busqueda}");

        try {
            if (respuesta.StatusCode == HttpStatusCode.OK) {
                lista = await respuesta.Content.ReadFromJsonAsync<Usuario[]>();
            }

            else {
                lista = null;
            }
        }

        catch (Exception ex) {
            lista = null;
            Console.WriteLine(ex);
        }

        finally {
            cargando = false;
        }
    }
}