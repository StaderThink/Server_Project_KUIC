@inject HttpClient http

<div class="card">
    <p><b>@(usuario.Nombre.ToCapitalize())</b></p>
    <p>@usuario.TipoDocumento @usuario.Documento</p>

    <span class="button is-static is-small">@(usuario.Activo ? "Activo" : "Inactivo")</span>

    <div class="control is-grouped">
        <a href="/usuario/modificar/@usuario.Id" class="button is-prime">Editar</a>

        @if (cargando) {
            <button class="is-outline has-loader" disabled>Borrar</button>
        }

        else {
            <button class="is-outline" @onclick="Eliminar">Borrar</button>
        }

        <AuthorizeView Roles="logistica">
            <Authorized>
                <button>Hola mundo!</button>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter]
    public Usuario usuario { get; set; }

    [Parameter]
    public EventCallback onDeleted { get; set; }

    bool cargando = false;

    async Task Eliminar() {
        cargando = true;

        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/usuario/{usuario.Id}");

        if (respuesta.IsSuccessStatusCode && onDeleted.HasDelegate) {
            await onDeleted.InvokeAsync(null);
        }

        cargando = false;
    }
}
