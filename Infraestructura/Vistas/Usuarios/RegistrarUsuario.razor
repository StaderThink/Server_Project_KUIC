@inject HttpClient http
@inject NavigationManager navegador

@page "/usuario/registrar"
@layout AppLayout

<h2>Registrar usuario</h2>

@if (mensaje is string) {
    <blockquote class="is-warn">
        <p>@mensaje</p>
    </blockquote>
}

<form @onsubmit="Enviar" @onsubmit:preventDefault>
    <div class="grid xs-1 md-2 has-gap">
        <div class="field">
            <label for="tipoDocumento">Tipo de documento</label>
            <select id="tipoDocumento" class="input" @bind="usuario.TipoDocumento" required>
                @foreach (TipoDocumento tipo in tiposDeDocumento) {
                    <option value="@tipo">@tipo</option>
                }
            </select>
        </div>

        <div class="field">
            <label for="documento">Documento</label>
            <input id="documento" type="number" placeholder="###" class="@(documentoYaExiste ? "input is-error" : "input")" @bind="usuario.Documento" @onfocusout="BuscarExistencia" required />

            @if (documentoYaExiste) {
                <small class="is-error">Documento ya ha sido registrado</small>
            }

            else {
                <small>Número de documento de identidad</small>
            }
        </div>

        <div class="field">
            <label for="nombre">Nombre</label>
            <input id="nombre" type="text" placeholder="Ej. Andres" class="input" @bind="usuario.Nombre" required />
        </div>

        <div class="field">
            <label for="apellido">Apellido</label>
            <input id="apellido" type="text" placeholder="Ej. Celis" class="input" @bind="usuario.Apellido" required />
        </div>

        <div class="field">
            <label for="correo">Correo</label>
            <input id="correo" type="email" placeholder="correo@dominio.com" class="input" @bind="usuario.Correo" required />
        </div>

        <div class="field">
            <label for="telefono">Teléfono</label>
            <div class="control is-attached">
                <span class="button is-static">+57</span>
                <input id="telefono" type="tel" placeholder="###" minlength="7" class="input" @bind="usuario.Telefono" required />
            </div>
        </div>

        <div class="field">
            <label for="cargo">Cargo</label>
            <select id="cargo" class="input" @bind="usuario.Cargo" required>
                @foreach (Cargo cargo in cargos) {
                    <option value="@cargo.Id">@(cargo.Nombre.ToCapitalize())</option>
                }
            </select>
        </div>
    </div>

    <div class="field">
        <div class="control is-grouped">
            @if (cargando) {
                <button class="is-prime has-loader" disabled>Registrar</button>
            }

            else {
                <button class="is-prime" disabled="@documentoYaExiste">Registrar</button>
            }

            <a href="/usuario" class="button is-outline">Cancelar</a>
        </div>
    </div>
</form>

@code {
        Cargo[] cargos { get; set; } = new Cargo[0];
        Usuario usuario { get; set; } = new Usuario();

        Array tiposDeDocumento = Enum.GetValues(typeof(TipoDocumento));

        bool documentoYaExiste = false;
        string mensaje;
        bool cargando = false;

    protected override async Task OnInitializedAsync() {
        cargos = await http.GetFromJsonAsync<Cargo[]>("/api/cargo");
    }

    async Task Enviar() {
        cargando = true;

        try {
            HttpResponseMessage respuesta = await http.PostAsJsonAsync("/api/usuario", usuario);

            if (respuesta.IsSuccessStatusCode) {
                navegador.NavigateTo("/usuario");
            }

            else {
                if (respuesta.StatusCode == HttpStatusCode.Unauthorized) {
                    mensaje = "¿Porque estas en esta ruta sin no tienes autorización?";
                }

                else {
                    mensaje = "Hubo un error al insertar";
                }
            }
        }

        catch {
            mensaje = "Hubo un error al insertar";
        }

        finally {
            cargando = false;
        }
    }

    async Task BuscarExistencia() {
        try {
            HttpResponseMessage respuesta = await http.GetAsync($"/api/usuario?buscar={usuario.Documento}");

            if (respuesta.IsSuccessStatusCode) {
                var existencias = await respuesta.Content.ReadFromJsonAsync<Usuario[]>();
                documentoYaExiste = existencias.Length > 0;
            }

            else {
                documentoYaExiste = true;
            }
        }

        catch {
            documentoYaExiste = true;
        }
    }
}
