@inject HttpClient http
@inject NavigationManager navegador

<div class="card">
    @if (producto is null)
    {
        <h6>Espere...</h6>
    }

    else
    {
        <h6>@producto.Nombre.ToCapitalize()</h6>
    }

    @if (categoria is null)
    {
        <p>Espere...</p>
    }

    else
    {
        <p>@categoria.Nombre</p>
    }

    <div class="control is-attached">
        <button class="is-outline" @onclick="Entrada">+</button>
        <input id="cantidad" type="number" class="input" @bind="existencia.Cantidad" disabled readonly />
        <button class="is-outline" disabled>-</button> <!-- programar ir a salida -->
    </div>
</div>

@code {

    [Parameter]
    public Existencia existencia { get; set; }

    [Parameter]
    public EventCallback<Existencia> OnExistenciaEliminada { get; set; }

    Producto producto { get; set; }

    Categoria categoria { get; set; }

    protected override async Task OnInitializedAsync() {
        producto = await http.GetFromJsonAsync<Producto>($"/api/producto/{existencia.Producto}");
        categoria = await http.GetFromJsonAsync<Categoria>($"/api/categoria/{producto.Categoria}");
    }

    async Task Eliminar()
    {
        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/existencia/{existencia.Id}");

        if (respuesta.IsSuccessStatusCode && OnExistenciaEliminada.HasDelegate)
        {
            await OnExistenciaEliminada.InvokeAsync(existencia);
        }
    }

    async Task Entrada()
    {
        navegador.NavigateTo("/entrada/registrar");
    }
}
