@inject HttpClient http
@inject NavigationManager navegador

<div class="card">
    @if(detalles is null)
    {
        <p>Espere...</p>
    }

    else {
        <p>@detalles.Count() Productos(s). <a>Ver detalle</a></p>
    }

    <p>@entrada.Fecha.ToShortDateString()</p>

    <p>@entrada.Observacion.ToCapitalize()</p>

    <div class="control is-grouped">
        <button class="is-outline" @onclick="Salida">Eliminar</button>
    </div>

</div>

@code {
    [Parameter]
    public Entrada entrada { get; set; }

    [Parameter]
    public EventCallback<Entrada> OnEntradaEliminada { get; set; }

    DetalleEntrada[] detalles { get; set; } = new DetalleEntrada[0];

    Producto[] productos { get; set; } = new Producto[0];

    bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        detalles = await http.GetFromJsonAsync<DetalleEntrada[]>($"/api/detalleEntrada/entrada/{entrada.Id}");
    }

    async Task Eliminar()
    {
        cargando = true;
        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/entrada/{entrada.Id}");

        if (respuesta.IsSuccessStatusCode && OnEntradaEliminada.HasDelegate)
        {
            await OnEntradaEliminada.InvokeAsync(entrada);
        }

        cargando = false;
    }

    void Salida()
    {
        navegador.NavigateTo($"/salida/registrar");
    }
}
