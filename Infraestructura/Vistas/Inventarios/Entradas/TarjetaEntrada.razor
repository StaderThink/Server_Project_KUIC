@inject HttpClient http
@inject NavigationManager navegador

    <div class="card">
        @if(detalles is null)
        {
            <div class="is-loader"></div>
        }

        else {
            @foreach(DetalleEntrada detalle in detalles) {
                <p>@detalle.Producto</p>
                <p>@detalle.Cantidad</p>
            }
        }
        <p>@entrada.Fecha</p>
        <p>@entrada.Observacion.ToCapitalize()</p>
        <button class="is-outline" @onclick="AgregarDetalle">Detalle</button>
        <div class="control is-grouped">
            <button class="is-prime" @onclick="Editar">Editar</button>

            @if (cargando)
            {
                <button class="is-outline has-loader" disabled>Eliminar</button>
            }

            else
            {
                <button class="is-outline" @onclick="Eliminar">Eliminar</button>
            }
        </div>

    </div>

@code {
    [Parameter]
    public Entrada entrada { get; set; }

    public Producto productos { get; set; }

    [Parameter]
    public EventCallback<Entrada> OnEntradaEliminada { get; set; }

    DetalleEntrada[] detalles { get; set; } = new DetalleEntrada[0];

    bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        detalles = await http.GetFromJsonAsync<DetalleEntrada[]>($"/api/detalleEntrada/entrada/{entrada.Id}");
    }

    async Task Eliminar()
    {
        cargando = true;
        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/entrada/{entrada.Id}");

        if (respuesta.IsSuccessStatusCode && OnEntradaEliminada.HasDelegate)
        {
            await OnEntradaEliminada.InvokeAsync(entrada);
        }

        cargando = false;
    }

    void Editar()
    {
        navegador.NavigateTo($"/entrada/modificar/{entrada.Id}");
    }

    void AgregarDetalle()
    {
        navegador.NavigateTo($"/detalleEntrada/registrar/{entrada.Id}");
    }
}
