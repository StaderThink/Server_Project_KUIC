@inject HttpClient http

<div class="card">
    <div class="card-content">
        <div class="content">
            <h6 class="title is-6">@(usuario.Nombre.ToCapitalize())</h6>

            <div class="field is-grouped is-grouped-multiline">
                <div class="control">
                    <div class="tags has-addons">
                        <div class="tag is-dark">@usuario.TipoDocumento</div>
                        <div class="tag is-light">@usuario.Documento</div>
                    </div>
                </div>

                <div class="control">
                    <div class="tag is-light">@(usuario.Activo ? "Activo" : "Inactivo")</div>
                </div>
            </div>
        </div>
    </div>

    <div class="card-footer">
        <a href="/usuario/modificar/@usuario.Id" class="card-footer-item">Editar</a>

        @if (cargando)
        {
            <a class="card-footer-item" disabled>Borrar</a>
        }

        else
        {
            <a class="card-footer-item" @onclick="Eliminar">Borrar</a>
        }
    </div>
</div>

@code {
    [Parameter]
    public Usuario usuario { get; set; }

    [Parameter]
    public EventCallback onDeleted { get; set; }

    bool cargando = false;

    async Task Eliminar() {
        cargando = true;

        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/usuario/{usuario.Id}");

        if (respuesta.IsSuccessStatusCode && onDeleted.HasDelegate) {
            await onDeleted.InvokeAsync(null);
        }

        cargando = false;
    }
}
