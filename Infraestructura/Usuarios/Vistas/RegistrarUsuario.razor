@page "/usuario/registrar"
@layout AppLayout

@attribute [Authorize(Roles = "usuarios")]

@inject HttpClient http
@inject NavigationManager navegador
@inject IToastService toaster

<nav class="breadcrumb">
    <ul>
        <li><a href="/usuario">Usuario</a></li>
        <li class="is-active"><a href="#">Registrar</a></li>
    </ul>
</nav>

<h3 class="title is-3">Registrar usuario</h3>

<hr />

<EditForm Model="Usuario" OnValidSubmit="Enviar">
    <DataAnnotationsValidator />

    <div class="columns is-mobile">
        <div class="column is-half">
            <FormField Label="Tipo de documento">
                <SelectField @bind-Value="Usuario.TipoDocumento" Context="value" Data="TiposDeDocumento">
                    <option value="@value">@value</option>
                </SelectField>
                <FormFeedback For="() => Usuario.TipoDocumento" />
            </FormField>
        </div>

        <div class="column is-half">
            <FormField Label="Documento">
                <NumberField id="documento" placeholder="#########" @bind-Value="Usuario.Documento" />
                <FormFeedback For="() => Usuario.Documento" />
            </FormField>
        </div>
    </div>

    <div class="columns is-mobile">
        <div class="column is-half">
            <FormField Label="Nombre">
                <TextField id="nombre" placeholder="Juan Pablo" @bind-Value="Usuario.Nombre" />
                <FormFeedback For="() => Usuario.Nombre" />
            </FormField>
        </div>

        <div class="column is-half">
            <FormField Label="Apellido">
                <TextField id="apellido" placeholder="Ramirez Velasquez" @bind-Value="Usuario.Apellido" />
                <FormFeedback For="() => Usuario.Apellido" />
            </FormField>
        </div>
    </div>

    <div class="columns is-mobile">
        <div class="column is-half">
            <FormField Label="Correo Electrónico">
                <EmailField id="correo" placeholder="ejemplo@ejemplo.com" @bind-Value="Usuario.Correo" />
                <FormFeedback For="() => Usuario.Correo" />
            </FormField>
        </div>

        <div class="column is-half">
            <FormField Label="Cargo">
                <SelectField id="cargo" @bind-Value="Usuario.Cargo" Context="value" Data="ListadoCargos">
                    <option value="@value.Id">@value.Nombre.ToCapitalize()</option>
                </SelectField>
                <FormFeedback Help="Esto define los accesos que tendrá el usuario" For="() => Usuario.Cargo" />
            </FormField>
        </div>
    </div>

    <div class="columns is-mobile">
        <div class="column is-half">
            <FormField Label="Fecha de nacimiento">
                <DateField id="fechaNacimiento" @bind-Value="Usuario.Nacimiento" />
                <FormFeedback For="() => Usuario.Nacimiento" />
            </FormField>
        </div>

        <div class="column is-half">
            <FormField Label="Fecha de expedición">
                <DateField id="fechaExpedicion" @bind-Value="Usuario.Expedicion" />
                <FormFeedback For="() => Usuario.Expedicion" Help="Fecha de expedición del documento" />
            </FormField>
        </div>
    </div>
    
    <FormField Label="Teléfono">
        <PhoneField id="telefono" placeholder="######" @bind-Value="Usuario.Telefono" />
        <FormFeedback For="() => Usuario.Telefono" />
    </FormField>

    <FormButtons IsLoading="Cargando">
        <CancelButton To="/usuario">Cancelar</CancelButton>
        <SubmitButton>Registrar</SubmitButton>
    </FormButtons>
</EditForm>

@code {
    private Cargo[] ListadoCargos = new Cargo[0];
    private string[] TiposDeDocumento = Enum.GetNames(typeof(TipoDocumento));

    private Usuario Usuario = new Usuario();
    private bool Cargando = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListadoCargos = await http.GetFromJsonAsync<Cargo[]>("/api/cargo");
        }

        catch
        {
            ListadoCargos = new Cargo[0];
            toaster.ShowError("No se cargaron correctamente los cargos");
        }
    }

    private async Task<bool> UserAlreadyExist()
    {
        var response = await http.GetAsync($"/api/usuario/documento/{Usuario.Documento}");
        return response.IsSuccessStatusCode;
    }

    private async Task Enviar()
    {
        Cargando = true;

        try
        {
            if (await UserAlreadyExist())
            {
                toaster.ShowWarning("Ya hay un usuario registrado con ese número de documento");
            }

            else
            {
                var response = await http.PostAsJsonAsync("/api/usuario", Usuario);

                if (response.IsSuccessStatusCode)
                {
                    navegador.NavigateTo("/usuario");
                }

                else
                {
                    toaster.ShowWarning("Por favor verifica los datos, no se logró enviar el formulario");
                }
            }
        }

        catch
        {
            toaster.ShowError("Hubo un error desconocido, intenta más tarde");

#if DEBUG
            throw;
#endif
        }

        finally
        {
            Cargando = false;
        }
    }
}
