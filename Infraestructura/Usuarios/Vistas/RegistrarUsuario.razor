@inject HttpClient http
@inject NavigationManager navegador

@page "/usuario/registrar"
@layout AppLayout

<h3 class="title is-3">Registrar usuario</h3>

@if (mensaje is string) {
    <div class="notification is-danger">
        <p>@mensaje</p>
    </div>
}

<AuthorizeView Roles="usuarios" Context="auth">
    <Authorized>
        <EditForm Model="usuario" OnValidSubmit="Prueba">
            <DataAnnotationsValidator />

            <FormField Label="Tipo de documento">
                <SelectField @bind-Value="usuario.Cargo" Context="value" Data="cargos">
                    <option value="@value.Id">@value.Nombre.ToCapitalize()</option>
                </SelectField>
                <FormFeedback For="() => usuario.TipoDocumento" />
            </FormField>

            <FormField Label="Documento">
                <TextField id="documento" @bind-Value="usuario.Documento" />
                <FormFeedback For="() => usuario.Documento" />
            </FormField>

            <FormField Label="Nombre">
                <TextField id="nombre" @bind-Value="usuario.Nombre" />
                <FormFeedback For="() => usuario.Nombre" />
            </FormField>

            <FormField Label="Apellido">
                <TextField id="apellido" @bind-Value="usuario.Apellido" />
                <FormFeedback For="() => usuario.Apellido" />
            </FormField>

            <FormField Label="Correo">
                <EmailField id="correo" @bind-Value="usuario.Correo" />
                <FormFeedback For="() => usuario.Correo" />
            </FormField>

            <FormField Label="Cargo">
                <SelectField id="cargo" @bind-Value="usuario.Cargo" Context="value" Data="cargos">
                    <option value="@value.Id">@value.Nombre.ToCapitalize()</option>
                </SelectField>
                <FormFeedback Help="Esto define los accesos que tendra el usuario" For="() => usuario.Cargo" />
            </FormField>

            <FormField Label="Fecha de nacimiento">
                <DateField id="fechaNacimiento" @bind-Value="usuario.Nacimiento" />
                <FormFeedback For="() => usuario.Nacimiento" />
            </FormField>

            <FormField Label="Fecha de expedición">
                <DateField id="fechaExpedicion" @bind-Value="usuario.Expedicion" />
                <FormFeedback For="() => usuario.Expedicion" Help="Fecha de expedición del documento" />
            </FormField>

            <div class="field">
                <div class="control">
                    <button type="submit" class="button is-link">Enviar</button>
                </div>
            </div>
        </EditForm>
    </Authorized>

    <NotAuthorized>
        <h1>No tienes permisos para estar aquí</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    Cargo[] cargos { get; set; } = new Cargo[0];
    Usuario usuario { get; set; } = new Usuario();

    IEnumerable<string> tiposDeDocumento = Enum.GetNames(typeof(TipoDocumento));

    bool yaExiste = false;
    string mensaje;
    bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cargos = await http.GetFromJsonAsync<Cargo[]>("/api/cargo");
        }

        catch
        {
            cargos = new Cargo[0];
        }
    }

    void Prueba()
    {
        Console.WriteLine(usuario);
    }

    async Task Enviar()
    {
        cargando = true;

        try
        {

            HttpResponseMessage respuesta = await http.PostAsJsonAsync("/api/usuario", usuario);

            if (respuesta.IsSuccessStatusCode) {
                navegador.NavigateTo("/usuario");
            }

            else {
                if (respuesta.StatusCode == HttpStatusCode.Unauthorized) {
                    mensaje = "No tienes autorización para realizar esta acción";
                }

                else {
                    mensaje = "Hubo un error al insertar";
                }
            }
        }

        catch {
            mensaje = "Hubo un error al insertar";
        }

        finally {
            cargando = false;
        }
    }

    async Task BuscarExistencia() {
        try {
            if (string.IsNullOrWhiteSpace(usuario.Documento))
            {
                yaExiste = false;
                return;
            }

            HttpResponseMessage respuesta = await http.GetAsync($"/api/usuario?buscar={usuario.Documento}");

            if (respuesta.IsSuccessStatusCode) {
                var existencias = await respuesta.Content.ReadFromJsonAsync<Usuario[]>();
                yaExiste = existencias.Length > 0;
            }

            else {
                yaExiste = true;
            }
        }

        catch {
            yaExiste = true;
        }
    }
}
