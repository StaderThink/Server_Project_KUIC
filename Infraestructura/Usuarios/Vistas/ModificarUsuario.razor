@inject HttpClient http
@inject IToastService toaster

<EditForm Model="Usuario" OnValidSubmit="Enviar">
    <DataAnnotationsValidator />

    <FormField Label="Tipo de documento">
        <SelectField @bind-Value="Usuario.TipoDocumento" Context="value" Data="TiposDeDocumento">
            <option value="@value">@value</option>
        </SelectField>
        <FormFeedback For="() => Usuario.TipoDocumento" />
    </FormField>

    <FormField Label="Nombre">
        <TextField id="nombre" @bind-Value="Usuario.Nombre" />
        <FormFeedback For="() => Usuario.Nombre" />
    </FormField>

    <FormField Label="Apellido">
        <TextField id="apellido" @bind-Value="Usuario.Apellido" />
        <FormFeedback For="() => Usuario.Apellido" />
    </FormField>

    <FormField Label="Correo">
        <EmailField id="correo" @bind-Value="Usuario.Correo" />
        <FormFeedback For="() => Usuario.Correo" />
    </FormField>

    <FormField Label="Telefono">
        <NumberField id="telefono" @bind-Value="Usuario.Telefono" />
        <FormFeedback For="() => Usuario.Telefono" />
    </FormField>

    <FormField Label="Cargo">
        <SelectField id="cargo" @bind-Value="Usuario.Cargo" Context="value" Data="ListadoCargos">
            <option value="@value.Id">@value.Nombre.ToCapitalize()</option>
        </SelectField>
        <FormFeedback Help="Esto define los accesos que tendra el usuario" For="() => Usuario.Cargo" />
    </FormField>

    <FormField Label="Fecha de nacimiento">
        <DateField id="fechaNacimiento" @bind-Value="Usuario.Nacimiento" />
        <FormFeedback For="() => Usuario.Nacimiento" />
    </FormField>

    <FormField Label="Fecha de expedición">
        <DateField id="fechaExpedicion" @bind-Value="Usuario.Expedicion" />
        <FormFeedback For="() => Usuario.Expedicion" Help="Fecha de expedición del documento" />
    </FormField>

    <FormField>
        <CheckboxField @bind-Value="Usuario.Activo">
            <span>El usuario esta activo en el sistema.</span>
        </CheckboxField>
    </FormField>
</EditForm>

@code {
    [Parameter]
    public Usuario Usuario { get; set; }

    private Cargo[] ListadoCargos = new Cargo[0];
    private string[] TiposDeDocumento = Enum.GetNames(typeof(TipoDocumento));

    protected override async Task OnInitializedAsync()
    {
        ListadoCargos = await http.GetFromJsonAsync<Cargo[]>("/api/cargo");
    }

    private async Task Enviar()
    {
        try
        {
            var respuesta = await http.PutAsJsonAsync($"/api/usuario/{Usuario.Id}", Usuario);

            if (respuesta.IsSuccessStatusCode)
            {
                toaster.ShowMessage("Datos actualizados correctamente");
            }

            else
            {
                toaster.ShowWarning("Por favor verifica los datos, no se logró enviar el formulario");
            }
        }

        catch
        {
            toaster.ShowError("Hubo un error desconocido, intenta nuevamente más tarde");

            #if DEBUG
            throw;
            #endif
        }
    }
}
