@inject HttpClient http
@inject NavigationManager navegador

@attribute [Authorize(Roles = "usuarios")]

@page "/usuario"
@page "/usuario/{busqueda}"
@layout AppLayout

<AuthorizeView Roles="usuarios">
    @if (cargando)
    {
        <div class="loader is-medium"></div>
    }

    else
    {
        <div class="container">
            <h2 class="title is-2">Listado de usuarios</h2>

            <div class="buttons">
                <a class="button is-primary" href="/usuario/registrar">Registrar usuario</a>
            </div>

            @if (lista is null)
            {
                <p>Algo salio muy mal...</p>
            }

            else
            {
                <div class="columns is-multiline">
                    @foreach (var usuario in lista)
                    {
                        <div class="column is-full-mobile is-half-tablet is-one-third-desktop">
                            <TarjetaUsuario usuario="usuario" onDeleted="ObtenerListado" />
                        </div>
                    }
                </div>
            }
        </div>
    }
</AuthorizeView>

@code {
    Usuario[] lista { get; set; }

    bool cargando = true;

    [Parameter]
    public string busqueda { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await ObtenerListado();
    }

    private async Task ObtenerListado()
    {
        cargando = true;
        var respuesta = await http.GetAsync($"/api/usuario?buscar={busqueda}");

        try
        {
            if (respuesta.StatusCode == HttpStatusCode.OK)
            {
                lista = await respuesta.Content.ReadFromJsonAsync<Usuario[]>();
            }

            else
            {
                lista = null;
            }
        }

        catch (Exception ex)
        {
            lista = new Usuario[0];
            Console.WriteLine(ex);
        }

        finally
        {
            cargando = false;
        }
    }
}