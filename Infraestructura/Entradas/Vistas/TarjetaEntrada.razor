@inject HttpClient http
@inject NavigationManager navegador

    <div class="card">
        <div class="card-content">
            <div class="content">
                @if (detalles is null)
                {
                    <p>Espere...</p>
                }

                else
                {
                    <p>@detalles.Count() Productos(s). <button class="button is-small" @onclick="abrirModal">Ver detalle</button></p>
                }

                @if (mostrarModal)
                {
                    <div class="modal">
                        <div class="modal-background"></div>
                        <div class="modal-card">
                            <header class="modal-card-head">
                                <p class="modal-card-title">Detalle</p>
                                <button class="delete" aria-label="close"></button>
                            </header>
                            <section class="modal-card-body">
                            </section>
                        </div>
                    </div>
                }

                <p>@entrada.Fecha.ToShortDateString()</p>

                <p>@entrada.Observacion.ToCapitalize()</p>
            </div>
        </div>

        <div class="card-footer">
            <a class="card-footer-item" @onclick="Salida">Eliminar</a>
        </div>

    </div>

@code {
    [Parameter]
    public Entrada entrada { get; set; }

    [Parameter]
    public EventCallback<Entrada> OnEntradaEliminada { get; set; }

    DetalleEntrada[] detalles { get; set; } = new DetalleEntrada[0];

    Producto[] productos { get; set; } = new Producto[0];

    bool cargando = false;

    bool mostrarModal = false;

    void abrirModal()
    {
        mostrarModal = true;
    }

    protected override async Task OnInitializedAsync()
    {
        detalles = await http.GetFromJsonAsync<DetalleEntrada[]>($"/api/detalleEntrada/entrada/{entrada.Id}");
    }

    async Task Eliminar()
    {
        cargando = true;
        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/entrada/{entrada.Id}");

        if (respuesta.IsSuccessStatusCode && OnEntradaEliminada.HasDelegate)
        {
            await OnEntradaEliminada.InvokeAsync(entrada);
        }

        cargando = false;
    }

    void Salida()
    {
        navegador.NavigateTo($"/salida/registrar");
    }
}
