@layout AppLayout
@inject NavigationManager navegador
@inject HttpClient http
@inject IToastService toaster
@attribute [Authorize(Roles = "logistica")]

@using Aplicacion.Entradas.Formularios
@page "/entrada/registrar"

    <nav class="breadcrumb">
        <ul>
            <li><a href="/entrada">Ingreso</a></li>
            <li class="is-active"><a href="#">Registrar</a></li>
        </ul>
    </nav>

<h3 class="title is-3">Registrar entrada</h3>

<hr />

<EditForm Model="entrada" OnValidSubmit="Enviar">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <FormField>
        <div class="control">
            <button class="button is-primary" type="button" @onclick="AgregarElemento">+ Producto</button>
        </div>
    </FormField>

    <FormField>
        @foreach (var detalle in detalles)
        {
            <CartItem Detail="@detalle" Products="listaProductos" OnDelete="EliminarElemento" />
        }
    </FormField>

    <FormField Label="Observación">
        <TextField id="observacion" @bind-Value="entrada.Observacion"></TextField>
        <FormFeedback For="() => entrada.Observacion" Help="Opcional"></FormFeedback>
    </FormField>

    <FormField IsLoading="cargando">
        <CancelButton To="/entrada">Cancelar</CancelButton>
        <SubmitButton>Registrar</SubmitButton>
    </FormField>

</EditForm>

@code {
        Entrada entrada { get; set; } = new Entrada();

        bool cargando = false;

        List<DetalleEntrada> detalles = new List<DetalleEntrada>();

        Producto[] listaProductos = new Producto[0];

        bool deshabilitar
    {
            get
        {
                return listaProductos.Length == 0;
            }
        }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AgregarElemento();
            listaProductos = await http.GetFromJsonAsync<Producto[]>("/api/producto");
        }

        catch
        {
            listaProductos = new Producto[0];
        }
    }

    private void AgregarElemento()
    {
        detalles.Add(new DetalleEntrada());
    }

    private void EliminarElemento(IDetalle detalle)
    {
        detalles.Remove((DetalleEntrada) detalle);
    }

    async Task Enviar()
    {
        try
        {
            foreach (var detalle in detalles)
            {
                if (detalle.Producto == 0 || detalle.Cantidad == 0)
                {
                    toaster.ShowWarning("Falta algún valor del detalle");
                }
                else
                {
                    cargando = true;
                    var formulario = new FormularioRegistrarEntrada()
                    {
                        Entrada = entrada,
                        Detalles = detalles
                    };

                    var respuesta = await http.PostAsJsonAsync("/api/entrada", formulario);

                    if (respuesta.IsSuccessStatusCode)
                    {
                        navegador.NavigateTo("/entrada");
                    }
                    cargando = false;
                }
            }
        }

        catch
        {
            throw; // TODO
        }
    }
}