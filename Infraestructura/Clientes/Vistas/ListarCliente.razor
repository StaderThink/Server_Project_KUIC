@inject HttpClient http
@inject NavigationManager navegador

@attribute [Authorize(Roles = "clientes, solicitar")]

@page "/cliente"
@page "/cliente/{busqueda}"
@layout AppLayout

@if (cargando)
{
    <div class="buttons">
        <a href="/cliente/registrar" class="button is-primary">Registrar cliente</a>
    </div>
    <div class="loader is-medium"></div>

}

else
{
    <h2 class="title is-2">Listado de clientes</h2>
    <div class="buttons">
        <a href="/cliente/registrar" class="button is-primary">Registrar cliente</a>
    </div>
    <hr />
    <div class="columns is-multiline">
        @foreach (var clientes in lista)
        {
            <div class="column is-full-mobile is-half-tablet is-one-third-desktop">
                <TarjetaCliente cliente="clientes" onDeleted="ObtenerListado" />
            </div>

        }
    </div>
}


@code {
    Cliente[] lista { get; set; }

    bool cargando = true;

    [Parameter]
    public string busqueda { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await ObtenerListado();
    }

    private async Task ObtenerListado()
    {
        cargando = true;
        HttpResponseMessage respuesta = await http.GetAsync($"/api/cliente?buscar={busqueda}");

        try
        {
            if (respuesta.StatusCode == HttpStatusCode.OK)
            {
                lista = await respuesta.Content.ReadFromJsonAsync<Cliente[]>();
            }

            else
            {
                lista = null;
            }
        }

        catch (Exception ex)
        {
            lista = new Cliente[0];
            Console.WriteLine(ex);
        }

        finally
        {
            cargando = false;
        }
    }
}
