@inject HttpClient http
@inject NavigationManager navegador
@attribute [Authorize(Roles = "pedidos, solicitar")]

@page "/pedido"
@page "/pedido/{busqueda}"
@layout AppLayout


        @if (cargando)
        {
            <div class="buttons">
                <a href="/pedido/registrar" class="button is-primary">Solicitar Pedido</a>
            </div>
            <div class="loader is-medium"></div> 
         
        }

        else
        {
            <h2 class="title is-2">Listado de solicitudes</h2>
            <div class="buttons">
                <a href="/pedido/registrar" class="button is-primary">Solicitar Pedido</a>
            </div>
            <hr />
            <div class="columns is-multiline">
                @foreach (var pedido in lista)
                {
                    <div class="column is-full-mobile is-half-tablet is-one-third-desktop">
                        <TarjetaPedido pedido="pedido" OnPedidoEliminado="ObtenerListado" />
                    </div>

                }
            </div>
        }

@code {
    Pedido[] lista { get; set; }

    bool cargando = true;

    [Parameter]
    public string busqueda { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await ObtenerListado();
    }

    private async Task ObtenerListado()
    {
        cargando = true;
        HttpResponseMessage respuesta = await http.GetAsync($"/api/pedido?buscar={busqueda}");

        try
        {
            if (respuesta.StatusCode == HttpStatusCode.OK)
            {
                lista = await respuesta.Content.ReadFromJsonAsync<Pedido[]>();
            }

            else
            {
                lista = null;
            }
        }

        catch (Exception ex)
        {
            lista = new Pedido[0];
            Console.WriteLine(ex);
        }

        finally
        {
            cargando = false;
        }
    }
}
