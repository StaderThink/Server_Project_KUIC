@inject HttpClient http
@inject NavigationManager navegador

<div class="card">
    <div class="card-content">
        <div class="content">
            @if (detalles is null)
            {
                <p>Espere...</p>
            }
            else
            {
                <p>@detalles.Count() Productos(s). <button class="button is-small is-primary is-outlined" @onclick="AbrirModal">Ver detalle</button></p>
            }

            @if (mostrarModal)
            {
                <div class="modal is-active">
                    <div class="modal-background"></div>
                    <div class="modal-card message is-primary">
                        <header class="modal-card-head">
                            <span class="modal-card-title"><h5 class="title is-5">Detalle de pedido #@pedido.Id</h5></span>
                            <button class="delete" @onclick="CerrarModal" aria-label="close"></button>
                        </header>
                        <section class="modal-card-body">
                            @foreach (var detalle in detalles)
                            {
                                <ProductDetail detalle="@detalle" />
                            }
                        </section>
                    </div>
                </div>
            }

            <p>@pedido.Fecha.ToShortDateString()</p>
            <p>@pedido.Observacion.ToCapitalize()</p>
            <p>
                @if (usuario is null)
                {
                    <span>Sin nombre</span>
                }

                else
                {
                    <span>@usuario.Nombre</span>
                }
            </p>
            @if (pedido.Estado == Estado.Pendiente)
            {
                <div class="control">
                    <span class="tag is-ligth">@(pedido.Estado.ToString())</span>
                </div>
            } @if (pedido.Estado == Estado.Autorizado)
            {
                <div class="control">
                    <span class="tag is-dark">@(pedido.Estado.ToString())</span>
                </div>
            } @if (pedido.Estado == Estado.Despachado)
            {
                <div class="control">
                    <span class="tag is-info">@(pedido.Estado.ToString())</span>
                </div>
            }@if (pedido.Estado == Estado.Entregado)
            {
                <div class="control">
                    <span class="tag is-success">@(pedido.Estado.ToString())</span>
                </div>
            }
            <br />
            <div class="card-footer">
                @if (cargando)
                {
                    <AuthorizeView Roles="pedidos" Context="auth">
                        <a class="card-footer-item" href="/pedido/modificar/@pedido.Id" disabled>
                            <span class="icon">
                                <box-icon name='edit-alt' color='#a69f99'></box-icon>
                            </span>
                        </a>
                    </AuthorizeView>
                }

                else
                {
                    <AuthorizeView Roles="pedidos" Context="auth">
                        <a class="card-footer-item" href="/pedido/modificar/@pedido.Id">
                            <span class="icon">
                                <box-icon name='edit-alt' color='#a69f99'></box-icon>
                            </span>
                        </a>
                    </AuthorizeView>
                }
            </div>
        </div>
    </div>
</div>


@code {
    #region Modal
    bool mostrarModal = false;

    void AbrirModal() => mostrarModal = true;
    void CerrarModal() => mostrarModal = false;
    #endregion

    [Parameter]
    public Pedido pedido { get; set; }

    [Parameter]
    public EventCallback<Pedido> OnPedidoEliminado { get; set; }

    DetallePedido[] detalles { get; set; } = new DetallePedido[0];

    Producto[] productos { get; set; } = new Producto[0];

    Cliente clientes { get; set; }
    Usuario usuario { get; set; }

    bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        detalles = await http.GetFromJsonAsync<DetallePedido[]>($"/api/detallePedido/pedido/{pedido.Id}");
        usuario = await http.GetFromJsonAsync<Usuario>($"/api/usuario/{pedido.Asesor}");
        clientes = await http.GetFromJsonAsync<Cliente>($"/api/cliente/{pedido.Cliente}");

    }

    async Task Eliminar()
    {
        cargando = true;
        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/pedido/{pedido.Id}");

        if (respuesta.IsSuccessStatusCode && OnPedidoEliminado.HasDelegate)
        {
            await OnPedidoEliminado.InvokeAsync(pedido);
        }

        cargando = false;
    }
}