@attribute [Authorize(Roles = "solicitar")]

@inject HttpClient http
@inject NavigationManager navegador
@inject AuthenticationStateProvider autentificacion
@inject IToastService toaster

@page "/pedido/registrar"
@layout AppLayout

@using System.Security.Claims
@using Aplicacion.Pedidos.Formularios
@using Infraestructura.Sesiones

<div class="level">
    <div class="level-left">
        <h3 class="title is-3">Solicitar Pedido</h3>
    </div>
    <div class="level-right">
        <nav class="breadcrumb is-small">
            <ul>
                <li><a href="/pedido">Solicitar</a></li>
                <li class="is-active"><a href="#">Registrar</a></li>
            </ul>
        </nav>
    </div>
</div>

<hr />

<EditForm Model="pedido" OnValidSubmit="Enviar">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="level">
        <div class="level-left"><span></span></div>
        <div class="level-right">
            <FormField>
                <div class="control">
                    <button class="button is-primary" type="button" @onclick="AgregarElemento">+ Producto</button>
                </div>
            </FormField>
        </div>
    </div>
    <FormField>
        @foreach (var detalle in detalles)
        {
            <CartItem Detail="@detalle" Products="listaProductos" OnDelete="EliminarElemento" UseStockOnly />
        }
    </FormField>

    <FormField Label="Cliente">
        <SelectField @bind-Value="pedido.Cliente" Context="cliente" Data="cliente">
            <option value="@cliente.Id">@(cliente.Nombre.ToCapitalize())</option>
        </SelectField>
        <FormFeedback For="() => pedido.Cliente"></FormFeedback>
    </FormField>

    <FormField Label="Fecha de entrega">
        <DateField id="fecha" @bind-Value="pedido.Fecha" />
        <FormFeedback For="() => pedido.Fecha"></FormFeedback>
    </FormField>

    <FormField Label="Descuento">
        <NumberField id="descuento" placeholder="% ##" @bind-Value="pedido.Descuento" />
        <FormFeedback For="() => pedido.Descuento"></FormFeedback>
    </FormField>

    <FormField Label="Observación">
        <TextField id="observacion" @bind-Value="pedido.Observacion"></TextField>
        <FormFeedback For="() => pedido.Observacion" Help="Opcional"></FormFeedback>
    </FormField>

    <div class="level">
        <div class="level-left"><span></span></div>
        <div class="level-right">
            <FormField IsLoading="cargando">
                <CancelButton To="/pedido">Cancelar</CancelButton>
                <SubmitButton>Registrar</SubmitButton>
            </FormField>
        </div>
    </div>
</EditForm>

@code {
    private Array estados = Enum.GetValues(typeof(Estado));
    private Cliente[] cliente { get; set; } = new Cliente[0];
    private Usuario[] usuarios { get; set; } = new Usuario[0];
    private Producto[] listaProductos { get; set; }

    private List<DetallePedido> detalles = new List<DetallePedido>();

    private Pedido pedido { get; set; } = new Pedido();
    private bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        usuarios = await http.GetFromJsonAsync<Usuario[]>("/api/usuario");
        cliente = await http.GetFromJsonAsync<Cliente[]>("/api/cliente");
        try
        {
            listaProductos = await http.GetFromJsonAsync<Producto[]>("/api/producto");

        }
        catch
        {
            listaProductos = new Producto[0];
        }

    }

    private void AgregarElemento()
    {
        detalles.Add(new DetallePedido());
    }

    private void EliminarElemento(IDetalle detalle)
    {
        detalles.Remove((DetallePedido)detalle);
    }

    private async Task Enviar()
    {
        cargando = true;

        try
        {
            if (detalles.Any() && detalles.All(d => d.Producto != 0 && d.Cantidad != 0))
            {
                cargando = true;

                var proveedor = (ProveedorAutenticacion)autentificacion;

                if (await proveedor.GetUserAsync() is Usuario usuario)
                {
                    pedido.Asesor = usuario.Id;

                    var formulario = new FormularioRegistrarPedido()
                    {
                        Pedido = pedido,
                        Detalles = detalles
                    };

                    var respuesta = await http.PostAsJsonAsync("/api/pedido", formulario);

                    if (respuesta.IsSuccessStatusCode)
                    {
                        navegador.NavigateTo("/pedido");
                        toaster.ShowSuccess("Registro realizado de forma exitosa");
                    }

                    cargando = false;
                }

                else
                {
                    toaster.ShowError("No estas autenticado en el sistema");
                }
            }

            else
            {
                toaster.ShowWarning("Falta algún valor del detalle");
            }
        }

        catch
        {
#if DEBUG
            throw;
#endif
        }

        finally
        {
            cargando = false;
        }
    }
}
