<div class="counter">
    <div class="field has-addons">
        <div class="control">
            <span class="button" @onclick="Increment">
                <ion-icon name="add-outline"></ion-icon>
            </span>
        </div>

        <div class="control">
            <input type="number" value="@Value" @oninput="OnChange" @onfocusout="OnFocusLost" min="@Min" max="@Max" class="input" readonly="@ReadOnly" />
        </div>

        <div class="control">
            <span class="button" @onclick="Decrement">
                @if (OnDelete.HasDelegate)
                {
                    <ion-icon name="@(Value == Min ? "trash-outline" : "remove-outline")"></ion-icon>
                }

                else
                {
                    <ion-icon name="remove-outline"></ion-icon>
                }
            </span>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool ReadOnly { get; set; } = false;

    #region Range
    [Parameter]
    public int Min { get; set; } = int.MinValue;

    [Parameter]
    public int Max { get; set; } = int.MaxValue;
    #endregion

    #region Value
    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }
    #endregion

    [Parameter]
    public EventCallback OnDelete { get; set; }

    #region Events
    private void ChangeValue(int value)
    {
        Value = value;
        ValueChanged.InvokeAsync(value);
    }

    private void InvokeDelete()
    {
        if (OnDelete.HasDelegate)
        {
            OnDelete.InvokeAsync(null);
        }
    }

    private void OnChange(ChangeEventArgs eventArgs)
    {
        try
        {
            Value = int.Parse(eventArgs.Value.ToString());
        }

        catch
        {
            Value = 0;
        }

        finally
        {
            ChangeValue(Value);
        }
    }

    private void OnFocusLost()
    {
        if (Value >= Max)
        {
            ChangeValue(Max);
        }

        else if (Value <= Min)
        {
            ChangeValue(Min);
        }
    }
    #endregion

    private void Increment()
    {
        if (Value < Max)
        {
            ChangeValue(++Value);
        }
    }

    private void Decrement()
    {
        if (Value > Min)
        {
            ChangeValue(--Value);
        }

        else
        {
            InvokeDelete();
        }
    }
}