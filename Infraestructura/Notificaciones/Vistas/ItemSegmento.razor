@inject HttpClient http 

    <div class="field">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="field is-grouped">
            <div class="control is-expanded">
                <FormField>
                    <SelectField @bind-Value="segmento.Cargo" Context="cargo" Data="cargos">
                        <option value="@cargo.Id">@(cargo.Nombre.ToCapitalize())</option>
                    </SelectField>
                    <FormFeedback For="() => segmento.Cargo" Help="Esto define a quien se dirijirá la notificación" />
                </FormField>
            </div>
            <div class="control">
                <button class="button is-primary is-light" @onclick="Eliminar">
                    <box-icon name="trash"></box-icon>
                </button>
            </div>
        </div>
    </div>

@code {
    [Parameter]
    public Segmento segmento { get; set; }

    [Parameter]
    public Cargo[] cargos { get; set; } = new Cargo[0];

    [Parameter]
    public EventCallback<Segmento> OnDeleted { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cargos = await http.GetFromJsonAsync<Cargo[]>("/api/cargo");
    }

    public void Eliminar()
    {
        if (OnDeleted.HasDelegate)
        {
            OnDeleted.InvokeAsync(segmento);
        }
    }
}
