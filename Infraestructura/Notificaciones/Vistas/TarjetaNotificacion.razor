@inject HttpClient http
@inject NavigationManager navegador

    <div class="card">
        <div class="card-content">
            <div class="content">
                <div class="field">
                    @foreach (var segmento in segmentos)
                    {
                        <TarjetaSegmento segmento="segmento"></TarjetaSegmento>
                    }
                </div>
                <p>@notificacion.Texto.ToCapitalize()</p>
                <p>@notificacion.FechaInicio</p>
                <p>@notificacion.FechaFin</p>
                <p>
                    @if (usuario is null)
                    {
                        <span>Sin nombre</span>
                    }

                    else
                    {
                        <span>@usuario.Nombre</span>
                    }
                </p>
            </div>
        </div>
        <div class="card-footer">
            @if (cargando)
            {
                <a class="card-footer-item" disabled>
                    <span class="icon">
                        <box-icon name='trash' color='#a69f99'></box-icon>
                    </span>
                </a>
            }

            else
            {
                <a class="card-footer-item" @onclick="Eliminar">
                    <span class="icon">
                        <box-icon name='trash' color='#a69f99'></box-icon>
                    </span>
                </a>
            }
        </div>
    </div>

@code {
    Segmento[] segmentos { get; set; } = new Segmento[0];

    [Parameter]
    public Notificacion notificacion { get; set; }

    [Parameter]
    public EventCallback<Notificacion> OnNotificacionEliminada { get; set; }

    Usuario usuario { get; set; }

    bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        segmentos = await http.GetFromJsonAsync<Segmento[]>($"/api/segmento/notificacion/{notificacion.Id}");
        usuario = await http.GetFromJsonAsync<Usuario>($"/api/usuario/{notificacion.Autor}");
    }

    async Task Eliminar()
    {
        cargando = true;
        HttpResponseMessage respuesta = await http.DeleteAsync($"/api/notificacion/{notificacion.Id}");

        if (respuesta.IsSuccessStatusCode && OnNotificacionEliminada.HasDelegate)
        {
            await OnNotificacionEliminada.InvokeAsync(notificacion);
        }

        cargando = false;
    }
}