@using System.Security.Claims
@using static System.Globalization.CultureInfo
@using Aplicacion.Notificaciones 

@inject HttpClient http
@inject NavigationManager navegador
@inject AuthenticationStateProvider autentificacion

@page "/notificacion/registrar"
@layout AppLayout

    <AuthorizeView Roles="usuarios" Context="auth">
        <Authorized>
            <h3 class="title is-3">Registrar nueva notificacion</h3>
            <EditForm Model="notificacion" OnValidSubmit="Enviar">
                <div class="field">
                    <div class="control">
                        <button class="button is-primary" @onclick="AgregarElemento">+ Segmento</button>
                    </div>
                </div>

                <div class="field">
                    @foreach (var segmento in segmentos)
                    {
                        <ItemSegmento cargos="cargos" segmento="@segmento" OnDeleted="EliminarElemento" />
                    }
                </div>

                <FormField Label="Mensaje">
                    <TextField id="texto" @bind-Value="notificacion.Texto" />
                    <FormFeedback For="() => notificacion.Texto"></FormFeedback>
                </FormField>

                <FormField Label="Fecha de inicio">
                    <DateField id="inicio" @bind-Value="notificacion.FechaInicio"  />
                    <FormFeedback For="() => notificacion.FechaInicio"></FormFeedback>
                </FormField>

                <FormField Label="Fecha de finalización">
                    <DateField id="fin" @bind-Value="notificacion.FechaFin" />
                    <FormFeedback For="() => notificacion.FechaFin"></FormFeedback>
                    <div>
                        @if (notificacion.FechaFin < notificacion.FechaInicio)
                        {
                            <div class="notification is-danger">
                                <button class="delete" aria-label="delete"></button>
                                La fecha de caducidad no puede ser menor al dia actual. Intente nuevamente
                            </div>
                        }
                    </div>
                </FormField>

                <div class="field">
                    <div class="control">
                        @if (cargando)
                        {
                            <button class="button is-primary is-loading">Registrar</button>
                        }

                        else
                        {
                            <button class="button is-primary" type="submit">Registrar</button>
                        }
                        <a href="/notificacion" class="button is-outlined">Cancelar</a>
                    </div>
                </div>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <h2>No tienes permisos para acceder a esta vista</h2>
        </NotAuthorized>
    </AuthorizeView>

@code {

    Notificacion notificacion { get; set; } = new Notificacion();

    bool cargando = false;

    Usuario[] usuarios { get; set; } = new Usuario[0];

    List<Segmento> segmentos = new List<Segmento>();

    Cargo[] cargos = new Cargo[0];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            usuarios = await http.GetFromJsonAsync<Usuario[]>("/api/usuario");
            cargos = await http.GetFromJsonAsync<Cargo[]>("/api/cargo");
        }

        catch
        {
            usuarios = new Usuario[0];
            cargos = new Cargo[0];
        }
    }

    private void AgregarElemento()
    {
        segmentos.Add(new Segmento());
    }

    private void EliminarElemento(Segmento segmento)
    {
        segmentos.Remove((Segmento)segmento);
    }


    async Task Enviar()
    {
        try
        {
            cargando = true;

            var estado = await autentificacion.GetAuthenticationStateAsync();
            var serial = estado.User.FindFirst(ClaimTypes.SerialNumber);

            if (serial is null)
            {
                // TODO
            }

            else
            {
                int id = int.Parse(serial.Value);
                notificacion.Autor = id;

                var formulario = new FormularioRegistrarNotificacion()
                {
                    Notificacion = notificacion,
                    Segmentos = segmentos
                };

                var respuesta = await http.PostAsJsonAsync("/api/notificacion", formulario);

                if (respuesta.IsSuccessStatusCode)
                {
                    navegador.NavigateTo("/notificacion");
                }
            }
        }

        catch
        {
            // TODO
        }

        finally
        {
            cargando = false;
        }
    }
}
