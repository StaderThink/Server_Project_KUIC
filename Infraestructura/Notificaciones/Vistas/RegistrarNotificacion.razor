@using System.Security.Claims
@using Aplicacion.Notificaciones

@inject HttpClient http
@inject NavigationManager navegador
@inject AuthenticationStateProvider autentificacion
@inject IToastService toaster
@attribute [Authorize(Roles = "usuarios")]

@page "/notificacion/registrar"
@layout AppLayout

<h3 class="title is-3">Registrar nueva notificacion</h3>
<EditForm Model="notificacion" OnValidSubmit="Enviar">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <FormField>
        <div class="control">
            <button type="button" class="button is-primary" @onclick="AgregarElemento">+ Segmento</button>
        </div>
    </FormField>

    <FormField>
        @foreach (var segmento in segmentos)
        {
            <ItemSegmento cargos="cargos" segmento="@segmento" OnDeleted="EliminarElemento" />
        }
    </FormField>

    <FormField Label="Mensaje">
        <TextField id="texto" @bind-Value="notificacion.Texto" />
        <FormFeedback For="() => notificacion.Texto"></FormFeedback>
    </FormField>

    <FormField Label="Fecha de inicio">
        <DateField id="inicio" @bind-Value="notificacion.FechaInicio" disabled />
        <FormFeedback For="() => notificacion.FechaInicio"></FormFeedback>
    </FormField>

    <FormField Label="Fecha de finalización">
        <DateField id="fin" @bind-Value="notificacion.FechaFin" />
        <FormFeedback For="() => notificacion.FechaFin"></FormFeedback>
    </FormField>

    <FormField IsLoading="cargando">
        <SubmitButton>Registrar</SubmitButton>
        <CancelButton To="/notificacion">Cancelar</CancelButton>
    </FormField>
</EditForm>

@code {

    Notificacion notificacion { get; set; } = new Notificacion();

    bool cargando = false;

    Usuario[] usuarios { get; set; } = new Usuario[0];

    List<Segmento> segmentos = new List<Segmento>();

    Cargo[] cargos = new Cargo[0];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AgregarElemento();
            usuarios = await http.GetFromJsonAsync<Usuario[]>("/api/usuario");
            cargos = await http.GetFromJsonAsync<Cargo[]>("/api/cargo");
        }

        catch
        {
            usuarios = new Usuario[0];
            cargos = new Cargo[0];
        }
    }

    private void AgregarElemento()
    {
        segmentos.Add(new Segmento());
    }

    private void EliminarElemento(Segmento segmento)
    {
        segmentos.Remove((Segmento)segmento);
    }

    async Task Enviar()
    {
        try
        {
            foreach (var segmento in segmentos)
            {
                if (notificacion.FechaFin < notificacion.FechaInicio)
                {
                    toaster.ShowWarning("La fecha de caducidad de una notificación no puede ser menor a la de inicio");
                }

                else if (segmento.Cargo == 0)
                {
                    toaster.ShowWarning("Te falta especificar el segmento");
                }

                else
                {
                    cargando = true;

                    var estado = await autentificacion.GetAuthenticationStateAsync();
                    var serial = estado.User.FindFirst(ClaimTypes.SerialNumber);

                    if (serial is null)
                    {
                        // TODO
                    }

                    else
                    {
                        int id = int.Parse(serial.Value);
                        notificacion.Autor = id;

                        var formulario = new FormularioRegistrarNotificacion()
                        {
                            Notificacion = notificacion,
                            Segmentos = segmentos
                        };

                        var respuesta = await http.PostAsJsonAsync("/api/notificacion", formulario);

                        if (respuesta.IsSuccessStatusCode)
                        {
                            navegador.NavigateTo("/notificacion");
                        }
                    }
                }
            }
        }

        catch
        {
            // TODO
        }

        finally
        {
            cargando = false;
        }
    }
}
