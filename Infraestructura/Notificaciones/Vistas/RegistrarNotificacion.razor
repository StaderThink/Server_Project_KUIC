@attribute [Authorize(Roles = "usuarios")]

@inject HttpClient http
@inject NavigationManager navegador
@inject AuthenticationStateProvider autentificacion
@inject IToastService toaster

@page "/notificacion/registrar"
@layout AppLayout

@using System.Security.Claims
@using Aplicacion.Notificaciones
@using Infraestructura.Sesiones

<div class="level">
    <div class="level-left">
        <h3 class="title is-3">Registrar Notificación</h3>
    </div>
    <div class="level-right">
        <nav class="breadcrumb">
            <ul>
                <li><a href="/notificacion">Notificación</a></li>
                <li class="is-active"><a href="#">Registrar</a></li>
            </ul>
        </nav>
    </div>
</div>

<hr />

<EditForm Model="notificacion" OnValidSubmit="Enviar">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="level">
        <div class="level-left"><span></span></div>
        <div class="level-right">
            <FormField>
                <div class="control">
                    <button type="button" class="button is-primary" @onclick="AgregarElemento">+ Segmento</button>
                </div>
            </FormField>
        </div>
    </div>

    <FormField>
        @foreach (var segmento in segmentos)
        {
            <ItemSegmento cargos="cargos" segmento="@segmento" OnDeleted="EliminarElemento" />
        }
    </FormField>

    <FormField Label="Mensaje">
        <TextField id="texto" @bind-Value="notificacion.Texto" />
        <FormFeedback For="() => notificacion.Texto"></FormFeedback>
    </FormField>

    <FormField Label="Fecha de inicio">
        <DateField id="inicio" @bind-Value="notificacion.FechaInicio" disabled />
        <FormFeedback For="() => notificacion.FechaInicio"></FormFeedback>
    </FormField>

    <FormField Label="Fecha de finalización">
        <DateField id="fin" @bind-Value="notificacion.FechaFin" />
        <FormFeedback For="() => notificacion.FechaFin"></FormFeedback>
    </FormField>

    <div class="level">
        <div class="level-left"><span></span></div>
        <div class="level-right">
            <FormField IsLoading="cargando">
                <CancelButton To="/notificacion">Cancelar</CancelButton>
                <SubmitButton>Registrar</SubmitButton>
            </FormField>
        </div>
    </div>
</EditForm>

@code {

    Notificacion notificacion { get; set; } = new Notificacion();

    bool cargando = false;

    Usuario[] usuarios { get; set; } = new Usuario[0];

    List<Segmento> segmentos = new List<Segmento>();

    Cargo[] cargos = new Cargo[0];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AgregarElemento();
            usuarios = await http.GetFromJsonAsync<Usuario[]>("/api/usuario");
            cargos = await http.GetFromJsonAsync<Cargo[]>("/api/cargo");
        }

        catch
        {
            usuarios = new Usuario[0];
            cargos = new Cargo[0];
        }
    }

    private void AgregarElemento()
    {
        segmentos.Add(new Segmento());
    }

    private void EliminarElemento(Segmento segmento)
    {
        segmentos.Remove((Segmento)segmento);
    }

    async Task Enviar()
    {
        try
        {
            if (notificacion.FechaFin <= notificacion.FechaInicio)
            {
                toaster.ShowWarning("La fecha de caducidad no puede ser menor a 1 día después del inicio");
            }

            if (segmentos.Any() && segmentos.All(s => s.Cargo != 0))
            {
                cargando = true;

                var proveedor = (ProveedorAutenticacion)autentificacion;

                if (await proveedor.GetUserAsync() is Usuario usuario)
                {
                    notificacion.Autor = usuario.Id;

                    var formulario = new FormularioRegistrarNotificacion()
                    {
                        Notificacion = notificacion,
                        Segmentos = segmentos
                    };

                    var respuesta = await http.PostAsJsonAsync("/api/notificacion", formulario);

                    if (respuesta.IsSuccessStatusCode)
                    {
                        navegador.NavigateTo("/notificacion");
                    }
                }

                else
                {
                    toaster.ShowError("No estas autenticado en el sistema");
                }
            }

            else
            {
                toaster.ShowWarning("Completa correctamente los segmentos de la notificación");
            }
        }

        catch
        {
#if DEBUG
            throw;
#endif
        }

        finally
        {
            cargando = false;
        }
    }
}
