@inject HttpClient http
@inject NavigationManager navegador

@page "/producto/registrar"
@layout AppLayout

    <AuthorizeView Roles="logistica" Context="auth">
        <Authorized>
            <h3 class="title is-3">Registrar nuevo producto</h3>

            @if (categorias.Length == 0)
            {
                <blockquote class="is-warn">
                    <p>@noExistenCategorias</p>
                    <a href="/categoria/registrar" class="button is-primary">Agregar Categoria</a>
                </blockquote>
            }

            else
            {
                <EditForm Model="producto" OnValidSubmit="Enviar">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <FormField Label="Nombre">
                        <TextField id="texto" placeholder="Ej. Pollo" @bind-Value="producto.Nombre"/>
                        <FormFeedback For="() => producto.Nombre"></FormFeedback>
                    </FormField>

                    <FormField Label="Código">
                        <TextField id="codigo" pattern="[0-9]{5}" placeholder="#####" @bind-Value="producto.Codigo" />
                        <FormFeedback For="() => producto.Codigo" Help="Código de 5 caracteres"></FormFeedback>
                    </FormField>

                    <FormField Label="Descripción">
                        <TextField id="descripcion" placeholder="Ej. Presas de pollo" @bind-Value="producto.Descripcion"></TextField>
                        <FormFeedback For="() => producto.Descripcion"></FormFeedback>
                    </FormField>

                    <FormField Label="Precio">
                        <NumberField id="precio" placeholder="$ ##.#" @bind-Value="producto.Precio" />
                        <FormFeedback For="() => producto.Precio"></FormFeedback>
                    </FormField>

                    <FormField Label="Presentación">
                        <SelectField @bind-Value="producto.Presentacion" Context="presentacion" Data="presentaciones">
                            <option value="@presentacion">@presentacion</option>
                        </SelectField>
                        <FormFeedback For="() => producto.Presentacion"></FormFeedback>
                    </FormField>

                    <FormField Label="Cantidad">
                        <NumberField id="min_cantidad" placeholder="###" @bind-Value="producto.MinCantidad" />
                        <FormFeedback For="() => producto.MinCantidad"></FormFeedback>
                    </FormField>

                    <FormField Label="Magnitud">
                        <SelectField Context="magnitud" Data="magnitudes" @bind-Value="producto.Magnitud">
                            <option value="@magnitud">@magnitud</option>
                        </SelectField>
                        <FormFeedback For="() => producto.Magnitud"></FormFeedback>
                    </FormField>

                    <FormField Label="Peso">
                        <NumberField id="min_peso" placeholder="Min" @bind-Value="producto.MinPeso" />
                        <FormFeedback For="() => producto.MinPeso" Help="Mínimo de peso"></FormFeedback>
                    </FormField>

                    <FormField>
                        <NumberField id="max_peso" placeholder="Max" @bind-Value="producto.MaxPeso" />
                        <FormFeedback For="() => producto.MaxPeso" Help="Máximo de peso"></FormFeedback>
                    </FormField>

                    <FormField Label="Categoria">
                        <SelectField @bind-Value="producto.Categoria" Context="categoria" Data="categorias">
                            <option value="@categoria.Id">@(categoria.Nombre.ToCapitalize())</option>
                        </SelectField>
                        <FormFeedback For="() => producto.Categoria"></FormFeedback>
                    </FormField>

                    <FormField>
                        @if (cargando)
                        {
                            <button class="button is-primary is-loading">Registrar</button>
                            <a href="/inventario" class="button is-outlined" disabled>Cancelar</a>
                        }
                        else {
                            <button class="button is-primary" type="submit">Registrar</button>
                            <a href="/inventario" class="button is-outlined">Cancelar</a>
                        }
                    </FormField>
                </EditForm>
            }
        </Authorized>
        <NotAuthorized>
            <p>No tienes permisos para esta vista</p>
        </NotAuthorized>
    </AuthorizeView>

@code {
    string[] magnitudes = Enum.GetNames(typeof(Magnitud));
    string[] presentaciones = Enum.GetNames(typeof(Presentacion));

    string noExistenCategorias = "No existen categorias, ¿por qué no agregas una?";

    bool cargando = false;

    Categoria[] categorias { get; set; } = new Categoria[0];

    Producto producto { get; set; } = new Producto();

    protected override async Task OnInitializedAsync()
    {
        categorias = await http.GetFromJsonAsync<Categoria[]>("/api/categoria");
    }

    async Task Enviar()
    {
        cargando = true;

        HttpResponseMessage respuesta = await http.PostAsJsonAsync("/api/producto", producto);

        if (respuesta.IsSuccessStatusCode)
        {
            navegador.NavigateTo("/inventario");
        }
    }
}