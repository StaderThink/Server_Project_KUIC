@inject HttpClient http
@inject NavigationManager navegador
@inject IToastService toaster

@page "/producto/registrar"
@layout AppLayout
@attribute [Authorize(Roles = "logistica")]

    <nav class="breadcrumb">
        <ul>
            <li><a href="/producto">Producto</a></li>
            <li class="is-active"><a href="#">Registrar</a></li>
        </ul>
    </nav>

    <h3 class="title is-3">Registrar nuevo producto</h3>
    <hr />

    @if (categorias.Length == 0)
    {
        <blockquote class="is-warn">
            <p>@noExistenCategorias</p>
            <a href="/categoria/registrar" class="button is-primary">Agregar Categoria</a>
        </blockquote>
    }

    else
    {
        <EditForm Model="producto" OnValidSubmit="Enviar">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="columns is-mobile">
                <div class="column is-half">
                    <FormField Label="Nombre">
                        <TextField id="texto" placeholder="Ej. Pollo" @bind-Value="producto.Nombre" />
                        <FormFeedback For="() => producto.Nombre"></FormFeedback>
                    </FormField>
                </div>

                <div class="column is-half">
                    <FormField Label="Código">
                        <TextField id="codigo" placeholder="#####" @bind-Value="producto.Codigo" />
                        <FormFeedback For="() => producto.Codigo" Help="Código de 5 caracteres"></FormFeedback>
                    </FormField>
                </div>
            </div>

            <div class="columns is-mobile">
                <div class="column is-half">
                    <FormField Label="Precio">
                        <NumberField id="precio" placeholder="$ ##.#" @bind-Value="producto.Precio" />
                        <FormFeedback For="() => producto.Precio"></FormFeedback>
                    </FormField>
                </div>

                <div class="column is-half">
                    <FormField Label="Presentación">
                        <SelectField @bind-Value="producto.Presentacion" Context="presentacion" Data="presentaciones">
                            <option value="@presentacion">@presentacion</option>
                        </SelectField>
                        <FormFeedback For="() => producto.Presentacion"></FormFeedback>
                    </FormField>
                </div>
            </div>

            <div class="columns is-mobile">
                <div class="column is-half">
                    <FormField Label="Cantidad mínima">
                        <NumberField id="min_cantidad" placeholder="###" @bind-Value="producto.MinCantidad" />
                        <FormFeedback For="() => producto.MinCantidad"></FormFeedback>
                    </FormField>
                </div>

                <div class="column is-half">
                    <FormField Label="Magnitud">
                        <SelectField Context="magnitud" Data="magnitudes" @bind-Value="producto.Magnitud">
                            <option value="@magnitud">@magnitud</option>
                        </SelectField>
                        <FormFeedback For="() => producto.Magnitud"></FormFeedback>
                    </FormField>
                </div>
            </div>

            <div class="columns is-mobile">
                <div class="column is-half">
                    <div class="column">
                        <FormField Label="Peso">
                            <NumberField id="min_peso" placeholder="Min" @bind-Value="producto.MinPeso" />
                            <FormFeedback For="() => producto.MinPeso" Help="Mínimo de peso"></FormFeedback>
                        </FormField>
                    </div>

                    <div class="column">
                        <FormField>
                            <NumberField id="max_peso" placeholder="Max" @bind-Value="producto.MaxPeso" />
                            <FormFeedback For="() => producto.MaxPeso" Help="Máximo de peso"></FormFeedback>
                        </FormField>
                    </div>
                </div>

                <div class="column is-half">
                    <FormField Label="Categoria">
                        <SelectField @bind-Value="producto.Categoria" Context="categoria" Data="categorias">
                            <option value="@categoria.Id">@(categoria.Nombre.ToCapitalize())</option>
                        </SelectField>
                        <FormFeedback For="() => producto.Categoria"></FormFeedback>
                    </FormField>
                </div>
            </div>

            <FormField Label="Descripción">
                <TextField id="descripcion" placeholder="Ej. Presas de pollo" @bind-Value="producto.Descripcion"></TextField>
                <FormFeedback For="() => producto.Descripcion"></FormFeedback>
            </FormField>

            <FormField IsLoading="cargando">
                <CancelButton To="/inventario">Cancelar</CancelButton>
                <SubmitButton>Registrar</SubmitButton>
            </FormField>
        </EditForm>
    }

@code {
    string[] magnitudes = Enum.GetNames(typeof(Magnitud));
    string[] presentaciones = Enum.GetNames(typeof(Presentacion));

    string noExistenCategorias = "No existen categorias, ¿por qué no agregas una?";

    bool cargando = false;

    Categoria[] categorias { get; set; } = new Categoria[0];

    Producto producto { get; set; } = new Producto();

    protected override async Task OnInitializedAsync()
    {
        categorias = await http.GetFromJsonAsync<Categoria[]>("/api/categoria");
    }

    private async Task<bool> CodigoExistente()
    {
        var response = await http.GetAsync($"/api/producto/codigo/{producto.Codigo}");
        return response.IsSuccessStatusCode;
    }

    async Task Enviar()
    {
        try
        {
            if (await CodigoExistente())
            {
                toaster.ShowWarning("Este código ya está registrado");
            }

            else
            {
                cargando = true;

                HttpResponseMessage respuesta = await http.PostAsJsonAsync("/api/producto", producto);

                if (respuesta.IsSuccessStatusCode)
                {
                    navegador.NavigateTo("/inventario");
                }
            }
        }

        catch
        {
            toaster.ShowError("Hubo un error, por favor intentelo más tarde");
        }
    }
}