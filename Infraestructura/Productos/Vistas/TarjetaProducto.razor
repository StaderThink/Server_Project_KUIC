@inject HttpClient http
@inject NavigationManager navegador

    <div class="card">
        <div class="card-content">
            <div class="content">
                <div class="field">
                    <p><b>@producto.Nombre.ToCapitalize()</b></p>
                    <p>$@producto.Precio</p>

                    <span class="button is-static is-small">#@producto.Codigo</span>
                </div>

                <div class="field">
                    <Counter @bind-Value="@producto.Existencias" OnAdd="AddStock" OnSubtract="SubtractStock" ReadOnly />
                </div>

            </div>
        </div>
        <div class="card-footer">
            <a class="card-footer-item" @onclick="Editar">Editar</a>

            @if (cargando)
            {
                <a class="card-footer-item" disabled>Eliminar</a>
            }

            else
            {
                <a class="card-footer-item" @onclick="Eliminar">Eliminar</a>
            }
        </div>
    </div>

@code {
    [Parameter]
    public Producto producto { get; set; }

    [Parameter]
    public EventCallback<Producto> OnProductoEliminado { get; set; }

    Categoria categoria { get; set; }

    bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        categoria = await http.GetFromJsonAsync<Categoria>($"/api/categoria/{producto.Categoria}");
    }

    private async Task Eliminar()
    {
        cargando = true;
        var respuesta = await http.DeleteAsync($"/api/producto/{producto.Id}");

        if (respuesta.IsSuccessStatusCode && OnProductoEliminado.HasDelegate)
        {
            await OnProductoEliminado.InvokeAsync(producto);
        }

        cargando = false;
    }

    private void Editar()
    {
        navegador.NavigateTo($"/producto/modificar/{producto.Id}");
    }

    private void AddStock()
    {
        navegador.NavigateTo("/entrada/registrar");
    }

    private void SubtractStock()
    {
        navegador.NavigateTo("/salida/registrar");
    }
}
