@inject HttpClient http
@inject NavigationManager navegador
@inject IToastService toaster

@page "/producto/modificar/{Id:int}"
@layout AppLayout
@attribute [Authorize(Roles = "logistica")]

    <h3 class="title is-3">Actualizar producto</h3>
    <EditForm Model="producto" OnValidSubmit="Enviar">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="columns is-mobile">
            <div class="column is-half">
                <FormField Label="Nombre">
                    <TextField id="texto" placeholder="Ej. Pollo" @bind-Value="producto.Nombre" />
                    <FormFeedback For="() => producto.Nombre"></FormFeedback>
                </FormField>
            </div>

            <div class="column is-half">
                <FormField Label="Código">
                    <NumberField id="codigo" @bind-Value="producto.Codigo" disabled readonly />
                    <FormFeedback For="() => producto.Codigo" Help="Código de 5 digitos"></FormFeedback>
                </FormField>
            </div>
        </div>

        <div class="columns is-mobile">
            <div class="column is-half">
                <FormField Label="Precio">
                    <NumberField id="precio" placeholder="$##.#" @bind-Value="producto.Precio" required />
                    <FormFeedback For="() => producto.Precio"></FormFeedback>
                </FormField>
            </div>

            <div class="column is-half">
                <FormField Label="Presentación">
                    <SelectField @bind-Value="producto.Presentacion" Context="presentacion" Data="presentaciones">
                        <option value="@presentacion">@presentacion</option>
                    </SelectField>
                    <FormFeedback For="() => producto.Presentacion"></FormFeedback>
                </FormField>
            </div>
        </div>

        <div class="columns is-mobile">
            <div class="column is-half">
                <FormField Label="Cantidad mínima">
                    <NumberField id="min_cantidad" placeholder="###" @bind-Value="producto.MinCantidad" />
                    <FormFeedback For="() => producto.MinCantidad"></FormFeedback>
                </FormField>
            </div>

            <div class="column is-half">
                <FormField Label="Magnitud">
                    <SelectField Context="magnitud" Data="magnitudes" @bind-Value="producto.Magnitud">
                        <option value="@magnitud">@magnitud</option>
                    </SelectField>
                    <FormFeedback For="() => producto.Magnitud"></FormFeedback>
                </FormField>
            </div>
        </div>

        <div class="columns is-mobile">
            <div class="column is-half">
                <div class="field">
                    <label class="label">Peso</label>
                    <div class="columns">
                        <div class="column">
                            <FormField>
                                <NumberField id="min_peso" placeholder="Min" @bind-Value="producto.MinPeso" />
                                <FormFeedback For="() => producto.MinPeso" Help="Mínimo de peso"></FormFeedback>
                            </FormField>
                        </div>

                        <div class="column">
                            <FormField>
                                <NumberField id="max_peso" placeholder="Max" @bind-Value="producto.MaxPeso" />
                                <FormFeedback For="() => producto.MaxPeso" Help="Máximo de peso"></FormFeedback>
                            </FormField>
                        </div>
                    </div>
                </div>
            </div>

            <div class="column is-half">
                <FormField Label="Categoria">
                    <SelectField @bind-Value="producto.Categoria" Context="categoria" Data="categorias">
                        <option value="@categoria.Id">@(categoria.Nombre.ToCapitalize())</option>
                    </SelectField>
                    <FormFeedback For="() => producto.Categoria"></FormFeedback>
                </FormField>
            </div>
        </div>

        <FormField Label="Descripción">
            <TextField id="descripcion" placeholder="Ej. Presas de pollo" @bind-Value="producto.Descripcion"></TextField>
            <FormFeedback For="() => producto.Descripcion" Help="Opcional"></FormFeedback>
        </FormField>
        
        <FormField IsLoading="cargando">
            <SubmitButton>Registrar</SubmitButton>
            <CancelButton To="/inventario">Cancelar</CancelButton>
        </FormField>
    </EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    string[] magnitudes = Enum.GetNames(typeof(Magnitud));
    string[] presentaciones = Enum.GetNames(typeof(Presentacion));

    Categoria[] categorias { get; set; } = new Categoria[0];
    Producto producto { get; set; } = new Producto();

    bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        categorias = await http.GetFromJsonAsync<Categoria[]>("/api/categoria");
        producto = await http.GetFromJsonAsync<Producto>($"/api/producto/buscar?id={Id}");
    }

    async Task Enviar()
    {
        cargando = true;

        try
        {
            //if (producto.Categoria == 0)
            //{
            //    toaster.ShowWarning("Te falta especificar la categoria");
            //}
            //else
            //{
            HttpResponseMessage respuesta = await http.PutAsJsonAsync($"/api/producto/{Id}", producto);

            if (respuesta.IsSuccessStatusCode)
            {
                navegador.NavigateTo("/inventario");
            }
            //}
        }

        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        finally
        {
            cargando = false;
        }
    }
}